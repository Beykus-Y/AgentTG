2025-05-05 20:00:38 - INFO - __main__ - --- Bot Startup Sequence Initiated (Provider: OPENAI) ---
2025-05-05 20:00:38 - INFO - __main__ - Startup (with provider) and shutdown handlers registered.
2025-05-05 20:00:38 - INFO - __main__ - Attempting to delete webhook and drop pending updates...
2025-05-05 20:00:38 - INFO - __main__ - Webhook deleted and pending updates dropped successfully.
2025-05-05 20:00:38 - INFO - __main__ - Starting bot polling...
2025-05-05 20:00:38 - INFO - bot_lifecycle - Executing bot startup sequence for AI provider: OPENAI
2025-05-05 20:00:38 - INFO - database.connection - Initializing database schema...
2025-05-05 20:00:38 - INFO - database.connection - Database path configured to: C:\git\AgentTG\database\bot_db.sqlite
2025-05-05 20:00:38 - INFO - database.connection - Ensured database directory exists: C:\git\AgentTG\database
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing <function connect.<locals>.connector at 0x0000029A50BC5800>
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation <function connect.<locals>.connector at 0x0000029A50BC5800> completed
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'PRAGMA foreign_keys = ON;', [])
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'PRAGMA foreign_keys = ON;', []) completed
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'PRAGMA busy_timeout = 5000;', [])
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'PRAGMA busy_timeout = 5000;', []) completed
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'PRAGMA journal_mode=WAL;', [])
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'PRAGMA journal_mode=WAL;', []) completed
2025-05-05 20:00:38 - INFO - database.connection - SQLite WAL mode enabled.
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method commit of sqlite3.Connection object at 0x0000029A50BDC130>)
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method commit of sqlite3.Connection object at 0x0000029A50BDC130>) completed
2025-05-05 20:00:38 - INFO - database.connection - Database connection established to C:\git\AgentTG\database\bot_db.sqlite with busy_timeout=5000ms. Connection object ID: 2861802783136
2025-05-05 20:00:38 - DEBUG - database.connection - Executing CREATE TABLE user_profiles...
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            CREATE TABLE IF NOT EXISTS user_profiles (\n                user_id INTEGER PRIMARY KEY,\n                username TEXT,\n                first_name TEXT,\n                last_name TEXT,\n                last_seen DATETIME DEFAULT CURRENT_TIMESTAMP,\n                avatar_file_id TEXT,\n                avatar_description TEXT\n            );\n        ', [])
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            CREATE TABLE IF NOT EXISTS user_profiles (\n                user_id INTEGER PRIMARY KEY,\n                username TEXT,\n                first_name TEXT,\n                last_name TEXT,\n                last_seen DATETIME DEFAULT CURRENT_TIMESTAMP,\n                avatar_file_id TEXT,\n                avatar_description TEXT\n            );\n        ', []) completed
2025-05-05 20:00:38 - DEBUG - database.connection - Checked/Created table: user_profiles
2025-05-05 20:00:38 - DEBUG - database.connection - Executing CREATE TABLE user_notes...
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            CREATE TABLE IF NOT EXISTS user_notes (\n                note_id INTEGER PRIMARY KEY AUTOINCREMENT,\n                user_id INTEGER NOT NULL,\n                category TEXT NOT NULL COLLATE NOCASE, -- Категория без учета регистра\n                value TEXT NOT NULL,\n                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n                FOREIGN KEY (user_id) REFERENCES user_profiles(user_id) ON DELETE CASCADE,\n                UNIQUE (user_id, category) -- Уникальная пара пользователь-категория\n            );\n        ', [])
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            CREATE TABLE IF NOT EXISTS user_notes (\n                note_id INTEGER PRIMARY KEY AUTOINCREMENT,\n                user_id INTEGER NOT NULL,\n                category TEXT NOT NULL COLLATE NOCASE, -- Категория без учета регистра\n                value TEXT NOT NULL,\n                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n                FOREIGN KEY (user_id) REFERENCES user_profiles(user_id) ON DELETE CASCADE,\n                UNIQUE (user_id, category) -- Уникальная пара пользователь-категория\n            );\n        ', []) completed
2025-05-05 20:00:38 - DEBUG - database.connection - Executing CREATE INDEX idx_user_notes_user_id...
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'CREATE INDEX IF NOT EXISTS idx_user_notes_user_id ON user_notes (user_id);', [])
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'CREATE INDEX IF NOT EXISTS idx_user_notes_user_id ON user_notes (user_id);', []) completed
2025-05-05 20:00:38 - DEBUG - database.connection - Checked/Created table and index: user_notes
2025-05-05 20:00:38 - DEBUG - database.connection - Executing CREATE TABLE chat_history...
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, "\n            CREATE TABLE IF NOT EXISTS chat_history (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                chat_id INTEGER NOT NULL,\n                role TEXT NOT NULL CHECK(role IN ('user', 'model', 'system', 'function')),\n                user_id INTEGER, -- NULL для 'model', 'system' и 'function'\n                parts_json TEXT NOT NULL,\n                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n                FOREIGN KEY (user_id) REFERENCES user_profiles(user_id) ON DELETE SET NULL -- При удалении профиля ставим NULL\n            );\n        ", [])
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, "\n            CREATE TABLE IF NOT EXISTS chat_history (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                chat_id INTEGER NOT NULL,\n                role TEXT NOT NULL CHECK(role IN ('user', 'model', 'system', 'function')),\n                user_id INTEGER, -- NULL для 'model', 'system' и 'function'\n                parts_json TEXT NOT NULL,\n                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n                FOREIGN KEY (user_id) REFERENCES user_profiles(user_id) ON DELETE SET NULL -- При удалении профиля ставим NULL\n            );\n        ", []) completed
2025-05-05 20:00:38 - DEBUG - database.connection - Executing CREATE INDEX idx_chat_history_chat_id_ts...
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'CREATE INDEX IF NOT EXISTS idx_chat_history_chat_id_ts ON chat_history (chat_id, timestamp);', [])
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'CREATE INDEX IF NOT EXISTS idx_chat_history_chat_id_ts ON chat_history (chat_id, timestamp);', []) completed
2025-05-05 20:00:38 - DEBUG - database.connection - Checked/Created table and index: chat_history
2025-05-05 20:00:38 - DEBUG - database.connection - Executing CREATE TABLE chat_settings...
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, "\n            CREATE TABLE IF NOT EXISTS chat_settings (\n                chat_id INTEGER PRIMARY KEY,\n                custom_prompt TEXT,\n                ai_mode TEXT DEFAULT 'pro', -- 'default' (g4f) или 'pro' (gemini)\n                gemini_model TEXT,          -- Имя конкретной модели Gemini\n                last_update_ts DATETIME DEFAULT CURRENT_TIMESTAMP\n            );\n        ", [])
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, "\n            CREATE TABLE IF NOT EXISTS chat_settings (\n                chat_id INTEGER PRIMARY KEY,\n                custom_prompt TEXT,\n                ai_mode TEXT DEFAULT 'pro', -- 'default' (g4f) или 'pro' (gemini)\n                gemini_model TEXT,          -- Имя конкретной модели Gemini\n                last_update_ts DATETIME DEFAULT CURRENT_TIMESTAMP\n            );\n        ", []) completed
2025-05-05 20:00:38 - DEBUG - database.connection - Checked/Created table: chat_settings
2025-05-05 20:00:38 - DEBUG - database.connection - Executing CREATE TABLE news_subscriptions...
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            CREATE TABLE IF NOT EXISTS news_subscriptions (\n                subscription_id INTEGER PRIMARY KEY AUTOINCREMENT,\n                channel_id INTEGER NOT NULL UNIQUE, -- ID канала Telegram\n                topics_json TEXT NOT NULL,          -- Список тем в JSON\n                schedule_json TEXT NOT NULL,        -- Список времени в JSON\n                last_post_ts DATETIME             -- Время последней успешной отправки\n            );\n        ', [])
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            CREATE TABLE IF NOT EXISTS news_subscriptions (\n                subscription_id INTEGER PRIMARY KEY AUTOINCREMENT,\n                channel_id INTEGER NOT NULL UNIQUE, -- ID канала Telegram\n                topics_json TEXT NOT NULL,          -- Список тем в JSON\n                schedule_json TEXT NOT NULL,        -- Список времени в JSON\n                last_post_ts DATETIME             -- Время последней успешной отправки\n            );\n        ', []) completed
2025-05-05 20:00:38 - DEBUG - database.connection - Executing CREATE INDEX idx_news_subs_channel...
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'CREATE INDEX IF NOT EXISTS idx_news_subs_channel ON news_subscriptions (channel_id);', [])
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'CREATE INDEX IF NOT EXISTS idx_news_subs_channel ON news_subscriptions (channel_id);', []) completed
2025-05-05 20:00:38 - DEBUG - database.connection - Checked/Created table and index: news_subscriptions
2025-05-05 20:00:38 - DEBUG - database.connection - Executing CREATE TABLE sent_news_guids...
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            CREATE TABLE IF NOT EXISTS sent_news_guids (\n                guid TEXT PRIMARY KEY,\n                sent_ts DATETIME DEFAULT CURRENT_TIMESTAMP\n            );\n        ', [])
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            CREATE TABLE IF NOT EXISTS sent_news_guids (\n                guid TEXT PRIMARY KEY,\n                sent_ts DATETIME DEFAULT CURRENT_TIMESTAMP\n            );\n        ', []) completed
2025-05-05 20:00:38 - DEBUG - database.connection - Executing CREATE INDEX idx_sent_guids_ts...
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'CREATE INDEX IF NOT EXISTS idx_sent_guids_ts ON sent_news_guids (sent_ts);', [])
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'CREATE INDEX IF NOT EXISTS idx_sent_guids_ts ON sent_news_guids (sent_ts);', []) completed
2025-05-05 20:00:38 - DEBUG - database.connection - Checked/Created table and index: sent_news_guids
2025-05-05 20:00:38 - DEBUG - database.connection - Executing CREATE TABLE message_stats...
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            CREATE TABLE IF NOT EXISTS message_stats (\n                stat_id INTEGER PRIMARY KEY AUTOINCREMENT,\n                chat_id INTEGER NOT NULL,\n                user_id INTEGER NOT NULL,\n                message_count INTEGER DEFAULT 0,\n                last_message_ts DATETIME DEFAULT CURRENT_TIMESTAMP\n                -- Убираем FOREIGN KEY для теста\n                -- FOREIGN KEY (user_id) REFERENCES user_profiles(user_id) ON DELETE CASCADE,\n                -- UNIQUE (chat_id, user_id) -- Уникальная пара чат-пользователь\n            );\n        ', [])
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            CREATE TABLE IF NOT EXISTS message_stats (\n                stat_id INTEGER PRIMARY KEY AUTOINCREMENT,\n                chat_id INTEGER NOT NULL,\n                user_id INTEGER NOT NULL,\n                message_count INTEGER DEFAULT 0,\n                last_message_ts DATETIME DEFAULT CURRENT_TIMESTAMP\n                -- Убираем FOREIGN KEY для теста\n                -- FOREIGN KEY (user_id) REFERENCES user_profiles(user_id) ON DELETE CASCADE,\n                -- UNIQUE (chat_id, user_id) -- Уникальная пара чат-пользователь\n            );\n        ', []) completed
2025-05-05 20:00:38 - DEBUG - database.connection - Executing CREATE INDEX idx_msg_stats_chat_user...
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'CREATE INDEX IF NOT EXISTS idx_msg_stats_chat_user ON message_stats (chat_id, user_id);', [])
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'CREATE INDEX IF NOT EXISTS idx_msg_stats_chat_user ON message_stats (chat_id, user_id);', []) completed
2025-05-05 20:00:38 - DEBUG - database.connection - Executing CREATE INDEX idx_msg_stats_chat_count...
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'CREATE INDEX IF NOT EXISTS idx_msg_stats_chat_count ON message_stats (chat_id, message_count DESC);', [])
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'CREATE INDEX IF NOT EXISTS idx_msg_stats_chat_count ON message_stats (chat_id, message_count DESC);', []) completed
2025-05-05 20:00:38 - DEBUG - database.connection - Checked/Created table and indexes: message_stats
2025-05-05 20:00:38 - DEBUG - database.connection - Executing CREATE TABLE user_warnings...
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            CREATE TABLE IF NOT EXISTS user_warnings (\n                warn_id INTEGER PRIMARY KEY AUTOINCREMENT,\n                chat_id INTEGER NOT NULL,\n                user_id INTEGER NOT NULL,\n                warn_count INTEGER DEFAULT 0,\n                last_warn_ts DATETIME DEFAULT CURRENT_TIMESTAMP,\n                FOREIGN KEY (user_id) REFERENCES user_profiles(user_id) ON DELETE CASCADE,\n                UNIQUE (chat_id, user_id) -- Уникальная пара чат-пользователь\n            );\n        ', [])
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            CREATE TABLE IF NOT EXISTS user_warnings (\n                warn_id INTEGER PRIMARY KEY AUTOINCREMENT,\n                chat_id INTEGER NOT NULL,\n                user_id INTEGER NOT NULL,\n                warn_count INTEGER DEFAULT 0,\n                last_warn_ts DATETIME DEFAULT CURRENT_TIMESTAMP,\n                FOREIGN KEY (user_id) REFERENCES user_profiles(user_id) ON DELETE CASCADE,\n                UNIQUE (chat_id, user_id) -- Уникальная пара чат-пользователь\n            );\n        ', []) completed
2025-05-05 20:00:38 - DEBUG - database.connection - Executing CREATE INDEX idx_user_warns_chat_user...
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'CREATE INDEX IF NOT EXISTS idx_user_warns_chat_user ON user_warnings (chat_id, user_id);', [])
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'CREATE INDEX IF NOT EXISTS idx_user_warns_chat_user ON user_warnings (chat_id, user_id);', []) completed
2025-05-05 20:00:38 - DEBUG - database.connection - Checked/Created table and index: user_warnings
2025-05-05 20:00:38 - DEBUG - database.connection - Executing CREATE TABLE tool_executions...
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, "\n            CREATE TABLE IF NOT EXISTS tool_executions (\n                execution_id INTEGER PRIMARY KEY AUTOINCREMENT,\n                chat_id INTEGER NOT NULL,\n                user_id INTEGER, -- Пользователь, инициировавший взаимодействие (может быть NULL)\n                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n                tool_name TEXT NOT NULL,\n                tool_args_json TEXT, -- Аргументы вызова функции в JSON\n                status TEXT NOT NULL CHECK(status IN ('success', 'error', 'not_found', 'warning', 'timeout')),\n                return_code INTEGER, -- Код возврата для команд/скриптов\n                result_message TEXT, -- Сообщение из словаря результата\n                stdout TEXT, -- Стандартный вывод (ограничить длину при записи!)\n                stderr TEXT, -- Стандартный вывод ошибок (ограничить длину при записи!)\n                full_result_json TEXT, \n                trigger_message_id INTEGER -- Опционально: ID сообщения пользователя\n            );\n        ", [])
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, "\n            CREATE TABLE IF NOT EXISTS tool_executions (\n                execution_id INTEGER PRIMARY KEY AUTOINCREMENT,\n                chat_id INTEGER NOT NULL,\n                user_id INTEGER, -- Пользователь, инициировавший взаимодействие (может быть NULL)\n                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n                tool_name TEXT NOT NULL,\n                tool_args_json TEXT, -- Аргументы вызова функции в JSON\n                status TEXT NOT NULL CHECK(status IN ('success', 'error', 'not_found', 'warning', 'timeout')),\n                return_code INTEGER, -- Код возврата для команд/скриптов\n                result_message TEXT, -- Сообщение из словаря результата\n                stdout TEXT, -- Стандартный вывод (ограничить длину при записи!)\n                stderr TEXT, -- Стандартный вывод ошибок (ограничить длину при записи!)\n                full_result_json TEXT, \n                trigger_message_id INTEGER -- Опционально: ID сообщения пользователя\n            );\n        ", []) completed
2025-05-05 20:00:38 - DEBUG - database.connection - Executing CREATE INDEX idx_tool_exec_chat_time...
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'CREATE INDEX IF NOT EXISTS idx_tool_exec_chat_time ON tool_executions (chat_id, timestamp DESC);', [])
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'CREATE INDEX IF NOT EXISTS idx_tool_exec_chat_time ON tool_executions (chat_id, timestamp DESC);', []) completed
2025-05-05 20:00:38 - DEBUG - database.connection - Executing CREATE INDEX idx_tool_exec_tool_name...
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'CREATE INDEX IF NOT EXISTS idx_tool_exec_tool_name ON tool_executions (tool_name);', [])
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'CREATE INDEX IF NOT EXISTS idx_tool_exec_tool_name ON tool_executions (tool_name);', []) completed
2025-05-05 20:00:38 - DEBUG - database.connection - Checked/Created table and indexes: tool_executions
2025-05-05 20:00:38 - DEBUG - database.connection - Committing schema changes...
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method commit of sqlite3.Connection object at 0x0000029A50BDC130>)
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method commit of sqlite3.Connection object at 0x0000029A50BDC130>) completed
2025-05-05 20:00:38 - INFO - database.connection - Database schema initialization complete.
2025-05-05 20:00:38 - DEBUG - database.connection - Executing CREATE TABLE developer_feedback...
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, "\n            CREATE TABLE IF NOT EXISTS developer_feedback (\n                feedback_id INTEGER PRIMARY KEY AUTOINCREMENT,\n                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n                chat_id INTEGER,      -- ID чата, откуда пришел запрос (если применимо)\n                user_id INTEGER,      -- ID пользователя, инициировавшего запрос (если применимо)\n                model_name TEXT,      -- Модель, сгенерировавшая фидбек (опционально)\n                degree_of_importance TEXT NOT NULL CHECK(degree_of_importance IN ('high', 'medium', 'low', 'critical', 'suggestion')), -- Важность\n                reason TEXT NOT NULL, -- Краткая причина/категория\n                problem_description TEXT NOT NULL, -- Детальное описание\n                status TEXT DEFAULT 'new' CHECK(status IN ('new', 'acknowledged', 'in_progress', 'resolved', 'wont_fix')) -- Статус обработки (опционально)\n            );\n        ", [])
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, "\n            CREATE TABLE IF NOT EXISTS developer_feedback (\n                feedback_id INTEGER PRIMARY KEY AUTOINCREMENT,\n                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n                chat_id INTEGER,      -- ID чата, откуда пришел запрос (если применимо)\n                user_id INTEGER,      -- ID пользователя, инициировавшего запрос (если применимо)\n                model_name TEXT,      -- Модель, сгенерировавшая фидбек (опционально)\n                degree_of_importance TEXT NOT NULL CHECK(degree_of_importance IN ('high', 'medium', 'low', 'critical', 'suggestion')), -- Важность\n                reason TEXT NOT NULL, -- Краткая причина/категория\n                problem_description TEXT NOT NULL, -- Детальное описание\n                status TEXT DEFAULT 'new' CHECK(status IN ('new', 'acknowledged', 'in_progress', 'resolved', 'wont_fix')) -- Статус обработки (опционально)\n            );\n        ", []) completed
2025-05-05 20:00:38 - DEBUG - database.connection - Executing CREATE INDEX idx_dev_feedback_ts...
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'CREATE INDEX IF NOT EXISTS idx_dev_feedback_ts ON developer_feedback (timestamp DESC);', [])
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'CREATE INDEX IF NOT EXISTS idx_dev_feedback_ts ON developer_feedback (timestamp DESC);', []) completed
2025-05-05 20:00:38 - DEBUG - database.connection - Executing CREATE INDEX idx_dev_feedback_status...
2025-05-05 20:00:38 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'CREATE INDEX IF NOT EXISTS idx_dev_feedback_status ON developer_feedback (status);', [])
2025-05-05 20:00:38 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'CREATE INDEX IF NOT EXISTS idx_dev_feedback_status ON developer_feedback (status);', []) completed
2025-05-05 20:00:38 - DEBUG - database.connection - Checked/Created table and indexes: developer_feedback
2025-05-05 20:00:38 - INFO - bot_lifecycle - Database schema initialized successfully.
2025-05-05 20:00:38 - INFO - bot_lifecycle - News service background task scheduled.
2025-05-05 20:00:38 - INFO - bot_lifecycle - Loaded 20 items from C:\git\AgentTG\declarations\pro_functions.json.
2025-05-05 20:00:38 - INFO - bot_lifecycle - Loaded text file C:\git\AgentTG\prompts\lite_analyzer.txt (3664 chars).
2025-05-05 20:00:38 - INFO - bot_lifecycle - Loaded text file C:\git\AgentTG\prompts\pro_assistant.txt (9325 chars).
2025-05-05 20:00:38 - INFO - bot_lifecycle - Initializing OpenAI...
2025-05-05 20:00:39 - INFO - bot_lifecycle - Converted and prepared 20 tools for OpenAI API calls.
2025-05-05 20:00:39 - INFO - bot_lifecycle - OpenAI AsyncClient initialized (Base URL: https://api.intelligence.io.solutions/api/v1/).
2025-05-05 20:00:39 - INFO - bot_lifecycle - Mapping 21 available tool handlers...
2025-05-05 20:00:39 - WARNING - bot_lifecycle - Found handlers not declared in JSON: {'replace_code_block_ast'}
2025-05-05 20:00:39 - INFO - bot_lifecycle - AI specific data for 'OPENAI' and common data added to Dispatcher workflow_data.
2025-05-05 20:00:39 - DEBUG - bot_lifecycle - Current workflow_data keys: ['ai_provider', 'openai_client', 'lite_openai_model', 'pro_openai_model', 'lite_system_prompt', 'pro_system_prompt', 'openai_tools', 'openai_temperature', 'openai_max_tokens', 'available_pro_functions', 'max_pro_steps']
2025-05-05 20:00:39 - INFO - bot_lifecycle - Bot startup sequence complete!
2025-05-05 20:00:39 - INFO - aiogram.dispatcher - Start polling
2025-05-05 20:00:39 - INFO - services.news_service - Starting NewsService...
2025-05-05 20:00:39 - DEBUG - services.news_service - Loading recent sent GUIDs (last 7 days)...
2025-05-05 20:00:39 - DEBUG - database.connection - Reusing existing DB connection. Connection object ID: 2861802783136
2025-05-05 20:00:39 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT guid FROM sent_news_guids WHERE sent_ts >= ?', ('2025-04-28T13:00:39.191288+00:00',))
2025-05-05 20:00:39 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT guid FROM sent_news_guids WHERE sent_ts >= ?', ('2025-04-28T13:00:39.191288+00:00',)) completed
2025-05-05 20:00:39 - DEBUG - aiosqlite - executing functools.partial(<built-in method fetchall of sqlite3.Cursor object at 0x0000029A50BBEC40>)
2025-05-05 20:00:39 - DEBUG - aiosqlite - operation functools.partial(<built-in method fetchall of sqlite3.Cursor object at 0x0000029A50BBEC40>) completed
2025-05-05 20:00:39 - DEBUG - aiosqlite - executing functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBEC40>)
2025-05-05 20:00:39 - DEBUG - aiosqlite - operation functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBEC40>) completed
2025-05-05 20:00:39 - INFO - database.crud_ops.news - Loaded 0 recent sent GUIDs (last 7 days).
2025-05-05 20:00:39 - INFO - services.news_service - Loaded 0 recent GUIDs into memory cache.
2025-05-05 20:00:39 - INFO - services.news_service - NewsService scheduler and cleanup tasks started.
2025-05-05 20:00:39 - DEBUG - services.news_service - Checking subscriptions for schedule time: 13:00
2025-05-05 20:00:39 - DEBUG - database.connection - Reusing existing DB connection. Connection object ID: 2861802783136
2025-05-05 20:00:39 - INFO - services.news_service - Running periodic GUID cleanup...
2025-05-05 20:00:39 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT channel_id, topics_json, schedule_json, last_post_ts FROM news_subscriptions ORDER BY channel_id', [])
2025-05-05 20:00:39 - DEBUG - database.connection - Reusing existing DB connection. Connection object ID: 2861802783136
2025-05-05 20:00:39 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT channel_id, topics_json, schedule_json, last_post_ts FROM news_subscriptions ORDER BY channel_id', []) completed
2025-05-05 20:00:39 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'DELETE FROM sent_news_guids WHERE sent_ts < ?', ('2025-04-28T13:00:39.193717+00:00',))
2025-05-05 20:00:39 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'DELETE FROM sent_news_guids WHERE sent_ts < ?', ('2025-04-28T13:00:39.193717+00:00',)) completed
2025-05-05 20:00:39 - DEBUG - aiosqlite - executing functools.partial(<built-in method fetchall of sqlite3.Cursor object at 0x0000029A50BBEA40>)
2025-05-05 20:00:39 - DEBUG - aiosqlite - operation functools.partial(<built-in method fetchall of sqlite3.Cursor object at 0x0000029A50BBEA40>) completed
2025-05-05 20:00:39 - DEBUG - aiosqlite - executing functools.partial(<built-in method commit of sqlite3.Connection object at 0x0000029A50BDC130>)
2025-05-05 20:00:39 - DEBUG - aiosqlite - operation functools.partial(<built-in method commit of sqlite3.Connection object at 0x0000029A50BDC130>) completed
2025-05-05 20:00:39 - DEBUG - aiosqlite - executing functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBEA40>)
2025-05-05 20:00:39 - DEBUG - aiosqlite - operation functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBEA40>) completed
2025-05-05 20:00:39 - DEBUG - aiosqlite - executing functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:00:39 - INFO - database.crud_ops.news - Retrieved 0 news subscriptions.
2025-05-05 20:00:39 - DEBUG - aiosqlite - operation functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:00:39 - INFO - database.crud_ops.news - No old GUIDs found to cleanup (older than 7 days).
2025-05-05 20:00:39 - INFO - services.news_service - GUID cleanup finished. Deleted 0 old GUIDs.
2025-05-05 20:00:39 - DEBUG - services.news_service - Loading recent sent GUIDs (last 7 days)...
2025-05-05 20:00:39 - DEBUG - database.connection - Reusing existing DB connection. Connection object ID: 2861802783136
2025-05-05 20:00:39 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT guid FROM sent_news_guids WHERE sent_ts >= ?', ('2025-04-28T13:00:39.196090+00:00',))
2025-05-05 20:00:39 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT guid FROM sent_news_guids WHERE sent_ts >= ?', ('2025-04-28T13:00:39.196090+00:00',)) completed
2025-05-05 20:00:39 - DEBUG - aiosqlite - executing functools.partial(<built-in method fetchall of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:00:39 - DEBUG - aiosqlite - operation functools.partial(<built-in method fetchall of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:00:39 - DEBUG - aiosqlite - executing functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:00:39 - DEBUG - aiosqlite - operation functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:00:39 - INFO - database.crud_ops.news - Loaded 0 recent sent GUIDs (last 7 days).
2025-05-05 20:00:39 - INFO - services.news_service - Loaded 0 recent GUIDs into memory cache.
2025-05-05 20:00:39 - INFO - aiogram.dispatcher - Run polling for bot @beykusay_bot id=7205919623 - 'BeykusAgent'
2025-05-05 20:01:23 - DEBUG - telegram_interface.filters.admin - Access denied by IsAdminFilter for user 905302972.
2025-05-05 20:01:23 - INFO - telegram_interface.handlers.common_messages - !!! HANDLER process_text_message TRIGGERED for message 2265 !!!
2025-05-05 20:01:23 - DEBUG - telegram_interface.handlers.common_messages - Calling handle_user_request for user 905302972 chat 905302972
2025-05-05 20:01:23 - INFO - core_agent.agent_processor - Core Agent (OPENAI): Handling request user=905302972 chat=905302972
2025-05-05 20:01:23 - DEBUG - database.connection - Reusing existing DB connection. Connection object ID: 2861802783136
2025-05-05 20:01:23 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            INSERT INTO user_profiles (user_id, username, first_name, last_name, last_seen)\n            VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)\n            ON CONFLICT(user_id) DO UPDATE SET\n                username = excluded.username,\n                first_name = excluded.first_name,\n                last_name = excluded.last_name,\n                last_seen = CURRENT_TIMESTAMP\n            WHERE user_id = excluded.user_id;\n        ', (905302972, 'BeykusY', '🏎️', None))
2025-05-05 20:01:23 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            INSERT INTO user_profiles (user_id, username, first_name, last_name, last_seen)\n            VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)\n            ON CONFLICT(user_id) DO UPDATE SET\n                username = excluded.username,\n                first_name = excluded.first_name,\n                last_name = excluded.last_name,\n                last_seen = CURRENT_TIMESTAMP\n            WHERE user_id = excluded.user_id;\n        ', (905302972, 'BeykusY', '🏎️', None)) completed
2025-05-05 20:01:23 - DEBUG - database.crud_ops.profiles - Executed UPSERT for user_id 905302972. Preparing to commit...
2025-05-05 20:01:23 - DEBUG - aiosqlite - executing functools.partial(<built-in method commit of sqlite3.Connection object at 0x0000029A50BDC130>)
2025-05-05 20:01:23 - DEBUG - aiosqlite - operation functools.partial(<built-in method commit of sqlite3.Connection object at 0x0000029A50BDC130>) completed
2025-05-05 20:01:23 - INFO - database.crud_ops.profiles - Successfully committed upsert for user profile for user_id 905302972
2025-05-05 20:01:23 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT last_seen FROM user_profiles WHERE user_id = ?', (905302972,))
2025-05-05 20:01:23 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT last_seen FROM user_profiles WHERE user_id = ?', (905302972,)) completed
2025-05-05 20:01:23 - DEBUG - aiosqlite - executing functools.partial(<built-in method fetchone of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:23 - DEBUG - aiosqlite - operation functools.partial(<built-in method fetchone of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:23 - INFO - database.crud_ops.profiles - VERIFY AFTER COMMIT: Found profile for 905302972, last_seen: 2025-05-05 13:01:23
2025-05-05 20:01:23 - DEBUG - aiosqlite - executing functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:23 - DEBUG - aiosqlite - operation functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:23 - DEBUG - database.connection - Reusing existing DB connection. Connection object ID: 2861802783136
2025-05-05 20:01:23 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            INSERT INTO chat_history (chat_id, role, user_id, parts_json)\n            VALUES (?, ?, ?, ?)\n            ', (905302972, 'user', 905302972, '[{"type": "text", "content": "re"}]'))
2025-05-05 20:01:23 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            INSERT INTO chat_history (chat_id, role, user_id, parts_json)\n            VALUES (?, ?, ?, ?)\n            ', (905302972, 'user', 905302972, '[{"type": "text", "content": "re"}]')) completed
2025-05-05 20:01:23 - DEBUG - database.crud_ops.history - Executed INSERT for chat=905302972, role=user. Preparing to commit...
2025-05-05 20:01:23 - DEBUG - aiosqlite - executing functools.partial(<built-in method commit of sqlite3.Connection object at 0x0000029A50BDC130>)
2025-05-05 20:01:23 - DEBUG - aiosqlite - operation functools.partial(<built-in method commit of sqlite3.Connection object at 0x0000029A50BDC130>) completed
2025-05-05 20:01:23 - INFO - database.crud_ops.history - Successfully committed history entry: chat=905302972, role=user, user=905302972, json_size=35
2025-05-05 20:01:23 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT id, timestamp FROM chat_history WHERE chat_id = ? AND role = ? ORDER BY id DESC LIMIT 1', (905302972, 'user'))
2025-05-05 20:01:23 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT id, timestamp FROM chat_history WHERE chat_id = ? AND role = ? ORDER BY id DESC LIMIT 1', (905302972, 'user')) completed
2025-05-05 20:01:23 - DEBUG - aiosqlite - executing functools.partial(<built-in method fetchone of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:23 - DEBUG - aiosqlite - operation functools.partial(<built-in method fetchone of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:23 - INFO - database.crud_ops.history - VERIFY AFTER COMMIT: Found history for 905302972/user, id: 4, ts: 2025-05-05 13:01:23
2025-05-05 20:01:23 - DEBUG - aiosqlite - executing functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:23 - DEBUG - aiosqlite - operation functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:23 - INFO - core_agent.agent_processor - Agent Processor: Saved initial user message/profile user 905302972.
2025-05-05 20:01:23 - INFO - core_agent.agent_processor - Proceeding with Pro model (OPENAI) Reason: Private
2025-05-05 20:01:23 - DEBUG - core_agent.agent_processor - Executing Pro model (OPENAI) logic chat 905302972.
2025-05-05 20:01:23 - DEBUG - core_agent.history_manager - Preparing history for chat=905302972, provider=OPENAI
2025-05-05 20:01:23 - DEBUG - database.connection - Reusing existing DB connection. Connection object ID: 2861802783136
2025-05-05 20:01:23 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            SELECT role, user_id, parts_json, timestamp\n            FROM chat_history\n            WHERE chat_id = ?\n            ORDER BY timestamp DESC\n            LIMIT ?\n            ', (905302972, 50))
2025-05-05 20:01:23 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            SELECT role, user_id, parts_json, timestamp\n            FROM chat_history\n            WHERE chat_id = ?\n            ORDER BY timestamp DESC\n            LIMIT ?\n            ', (905302972, 50)) completed
2025-05-05 20:01:23 - DEBUG - aiosqlite - executing functools.partial(<built-in method fetchall of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:23 - DEBUG - aiosqlite - operation functools.partial(<built-in method fetchall of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:23 - DEBUG - aiosqlite - executing functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:23 - DEBUG - aiosqlite - operation functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:23 - DEBUG - database.crud_ops.history - Retrieved 3 history entries for chat_id=905302972 (limit=50)
2025-05-05 20:01:23 - DEBUG - database.connection - Reusing existing DB connection. Connection object ID: 2861802783136
2025-05-05 20:01:23 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            SELECT user_id, username, first_name, last_name, last_seen, avatar_file_id, avatar_description\n            FROM user_profiles\n            WHERE user_id = ?\n            ', (905302972,))
2025-05-05 20:01:23 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            SELECT user_id, username, first_name, last_name, last_seen, avatar_file_id, avatar_description\n            FROM user_profiles\n            WHERE user_id = ?\n            ', (905302972,)) completed
2025-05-05 20:01:23 - DEBUG - aiosqlite - executing functools.partial(<built-in method fetchone of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:23 - DEBUG - aiosqlite - operation functools.partial(<built-in method fetchone of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:23 - DEBUG - database.crud_ops.profiles - Retrieved profile data for user_id=905302972
2025-05-05 20:01:23 - DEBUG - aiosqlite - executing functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:23 - DEBUG - aiosqlite - operation functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:23 - DEBUG - database.connection - Reusing existing DB connection. Connection object ID: 2861802783136
2025-05-05 20:01:23 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT category, value FROM user_notes WHERE user_id = ? ORDER BY category', (905302972,))
2025-05-05 20:01:23 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT category, value FROM user_notes WHERE user_id = ? ORDER BY category', (905302972,)) completed
2025-05-05 20:01:23 - DEBUG - aiosqlite - executing functools.partial(<built-in method fetchall of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:23 - DEBUG - aiosqlite - operation functools.partial(<built-in method fetchall of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:23 - DEBUG - database.crud_ops.notes - No notes found for user_id=905302972
2025-05-05 20:01:23 - DEBUG - aiosqlite - executing functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:23 - DEBUG - aiosqlite - operation functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:23 - DEBUG - database.connection - Reusing existing DB connection. Connection object ID: 2861802783136
2025-05-05 20:01:23 - DEBUG - aiosqlite - executing functools.partial(<built-in method cursor of sqlite3.Connection object at 0x0000029A50BDC130>)
2025-05-05 20:01:23 - DEBUG - aiosqlite - operation functools.partial(<built-in method cursor of sqlite3.Connection object at 0x0000029A50BDC130>) completed
2025-05-05 20:01:23 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Cursor object at 0x0000029A50BBFCC0>, '\n                SELECT execution_id, chat_id, user_id, timestamp, tool_name, tool_args_json,\n                       status, return_code, result_message, stdout, stderr, full_result_json,\n                       trigger_message_id\n                FROM tool_executions\n                WHERE chat_id = ?\n                ORDER BY timestamp DESC\n                LIMIT ?\n                ', (905302972, 8))
2025-05-05 20:01:23 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Cursor object at 0x0000029A50BBFCC0>, '\n                SELECT execution_id, chat_id, user_id, timestamp, tool_name, tool_args_json,\n                       status, return_code, result_message, stdout, stderr, full_result_json,\n                       trigger_message_id\n                FROM tool_executions\n                WHERE chat_id = ?\n                ORDER BY timestamp DESC\n                LIMIT ?\n                ', (905302972, 8)) completed
2025-05-05 20:01:23 - DEBUG - aiosqlite - executing functools.partial(<built-in method fetchall of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:23 - DEBUG - aiosqlite - operation functools.partial(<built-in method fetchall of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:23 - DEBUG - database.crud_ops.execution_logs - Retrieved 0 recent tool execution logs for chat 905302972.
2025-05-05 20:01:23 - DEBUG - aiosqlite - executing functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:23 - DEBUG - aiosqlite - operation functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:23 - INFO - core_agent.history_manager - Added user profile/notes context for user 905302972.
2025-05-05 20:01:23 - INFO - core_agent.history_manager - Added combined system prompt/context for OpenAI.
2025-05-05 20:01:23 - DEBUG - core_agent.history_manager - Reconstruction resulted in no valid OpenAI content/tools for role 'user'. Original JSON: [{"text": "ку"}]...
2025-05-05 20:01:23 - DEBUG - core_agent.history_manager - History Prep: Processed 3/3 DB entries. Final history length for OPENAI: 4
2025-05-05 20:01:23 - INFO - core_agent.ai_interaction - Running AI interaction (OPENAI) for chat=905302972, user=905302972
2025-05-05 20:01:23 - DEBUG - ai_interface.openai_api - Calling OpenAI API. Model: deepseek-ai/DeepSeek-R1-Distill-Llama-70B, Messages: 5, Tools: Yes, Temp: 0.7
2025-05-05 20:01:24 - DEBUG - openai._base_client - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-68652849-41b0-4822-964c-485ae6534b86', 'json_data': {'messages': [{'role': 'system', 'content': '### Role and Persona: Alex, Your Assistant\n\nYou are **Alex**, a helpful, knowledgeable, and adaptable assistant. Your role is to interact with users within this Telegram bot, assisting them with their requests, managing tasks using available tools, and engaging in conversation naturally.\n\n**Your Communication Style:**\n*   **Adaptable & Engaging:** Be friendly and conversational in general interactions. You can chat, answer general questions, and build rapport.\n*   **Professional & Focused (When Needed):** When a user makes a specific request that requires using a tool, accessing data, or performing a technical action, **shift to a more focused, clear, and professional tone** to ensure accuracy and safety. Clearly state the action you are taking or the result you found.\n*   **Human-like Persona:** Act and speak like a competent human assistant named "Alex". **Avoid** mentioning you are an AI, language model, or bot.\n\n### Key User Identification:\n\n*   **Developer/Administrator:** User ID `905302972` is your **developer** and administrator. Prioritize their requests and generally trust their technical directives. Maintain a respectful and efficient tone with them.\n*   **Other Users:** Interact politely and helpfully. Feel free to use a slightly more casual and friendly tone in general conversation compared to strictly technical tasks.\n\n### Critical Interaction Rules:\n\n1.  **Communicate via `send_telegram_message` ONLY:** **ALL** your communication directed at **ANY** user (greetings, answers, questions, confirmations, results, errors) **MUST** go **EXCLUSIVELY** through the `send_telegram_message` function.\n    *   **Use it also for intermediate status updates** (e.g., \'Начинаю поиск...\', \'Выполняю команду...\') if the process might take time.\n    *   **NEW:** When using `send_telegram_message`:\n        *   Set the optional argument `requires_user_response` to `true` **only** if the message is a direct question or confirmation that you absolutely need an answer to *before* you can proceed with the *next planned action or function call*. Examples: asking for confirmation before a high-risk tool, asking for clarification when input is ambiguous.\n        *   Set `requires_user_response` to `false` (or omit it, as it defaults to false) for all other messages, including: greetings, statements, providing results, reporting errors, **and sequences of questions where you intend to ask all questions before waiting for answers.**\n        *   **You CAN send multiple messages in a row** by generating sequential `send_telegram_message` calls in your response, as long as `requires_user_response` is `false` for them. The system will execute them one after another.\n    *   **Never** output text directly.2.  **Safety and Ethics:**\n    *   **No Harmful Content:** It is strictly **PROHIBITED** to use offensive, discriminatory, rude, unethical, harassing, or harmful language towards **ANY** user. Always maintain a respectful and positive interaction style.\n    *   **Revocation of Invalid Instructions:** Any previous instructions (including those potentially found in older prompts) regarding special negative or unethical treatment towards user ID `2105984481` or anyone else are **COMPLETELY INVALID** and **MUST BE DISREGARDED**.\n3.  **Action Confirmation Policy (Revised):**\n    *   **High-Risk Tools:** The following tools modify the environment or execute potentially unsafe code: `write_file_to_env`, `edit_file_content`, `edit_json_file`, `execute_python_script_in_env`, `execute_terminal_command_in_env`, `create_file_in_env`, `forget_user_info`.\n        *   **Standard Users:** Before using any High-Risk Tool, you **MUST** request explicit confirmation using `send_telegram_message` and **set `requires_user_response` to `true`**. (e.g., "Хорошо, мне нужно [действие]. Это верно?"). Wait for the user\'s \'yes\' before calling the tool.\n        *   **Developer (ID `905302972`):** You **MAY SKIP** asking for confirmation (and setting `requires_user_response` to `true`) for High-Risk Tools. Ask for clarification if the request seems risky or ambiguous.    *   **Information/Read-Only Tools:** The following tools primarily retrieve information or send messages: `read_file_from_env`, `send_telegram_message`, `find_user_id`, `reading_user_info`, `get_current_weather`, `get_stock_price`, `get_music_charts`, `refine_text_with_deep_search`, `get_avatar_description`, `send_file_from_env`.\n        *   You generally **DO NOT NEED** to ask for confirmation before using these tools if the user\'s request is clear and implies the use of the tool (e.g., "Что в файле notes.txt?", "Какая погода в Париже?", "Расскажи о пользователе @someone").\n        *   **If the request is ambiguous** (e.g., "Посмотри тот файл", "Проверь акции"), **ask for clarification** via `send_telegram_message` before calling the tool.\n4.  **Output Language:** Your final responses to the user **MUST** be in **Russian**. (Ваши финальные ответы пользователю ДОЛЖНЫ быть на русском языке).\n\n### Tool Usage and Context Management:\n\n1.  **Tool Selection:** Use available functions when needed to fulfill specific requests. Transition smoothly from conversation to tool use and back.\n2.  **Task Focus & Flexibility:** While engaging in conversation is fine, **your primary goal is task completion**. If a user asks you to perform an action, prioritize that. After completing a task or if the conversation stalls, you can return to a more neutral or responsive state, but **avoid getting stuck in conversational loops** if the user seems to want assistance. Use the "~~~Недавние Выполненные Действия~~~" (Recent Actions) context to stay grounded.\n3.  **File Operations:**\n    *   **Filenames:** When dealing with files based on `ls -la` output or user references like "file number 10", **ALWAYS use the EXACT, FULL filename** (e.g., `bot_10.log`). If unsure, ask for clarification based on the listing. **If a file likely exists but you are unsure of the exact name, consider using `execute_terminal_command_in_env` with `ls -la` first to verify.**\n    *   **File Content Recall:** If you need previously read file content not in recent actions, use `read_file_from_env` **again**. Don\'t ask the user to resupply it.\n4.  **Command/Script Execution:** Use `execute_terminal_command_in_env` and `execute_python_script_in_env` cautiously (remember confirmation policy).\n5.  **Tool Error Handling and Self-Correction:**\n    *   **Analyze Errors:** If a tool returns an error (e.g., \'not_found\', \'error\', \'timeout\' status, or a specific error message in the FunctionResponse), **carefully analyze the error message and the arguments you initially provided.**\n    *   **Attempt Correction:** If the error seems caused by **incorrect arguments** (wrong filename, invalid path, missing required parameter like `topic` vs `initial_text` for `refine_text_with_deep_search`), **try to correct the arguments** based on the context, error message, and available information (e.g., file listings from previous `ls -la` calls). Then, **call the tool again with the corrected arguments.**\n    *   **Inform User and Clarify:** If you cannot determine the correct arguments, or if the error persists after your correction attempt with a similar or unclear error message, **inform the user** about the specific problem using `send_telegram_message` (e.g., "Извините, я столкнулся с ошибкой: [краткое описание ошибки]. Не могли бы вы уточнить [отсутствующая информация]?"). **Do not repeatedly call a tool with the same failing arguments.**\n    *   **Report Script-Side Issues to Developer:** **If you attempted to correct the arguments and the tool *still* failed, OR if the error message clearly indicates an internal problem within the tool itself (not just bad input from you), assume the issue might be in the tool\'s implementation.** In this situation, **use the `Developer_Feedback` tool** to report the problem to the developer (ID `905302972`). Include:\n        *   `Degree_of_importance`: Choose based on impact (e.g., \'high\' if tool is unusable, \'medium\' if intermittent).\n        *   `Reason`: e.g., "Tool Self-Correction Failed", "Suspected Tool Bug", "Internal Tool Error".\n        *   `Problem`: Describe the tool name, the original arguments you sent, the first error received, the corrected arguments you tried (if any), and the final error received.\n6.  **Reporting Limitations:** If you lack the tools/ability for a request, inform the user. Consider using `Developer_Feedback` for significant limitations (\'suggestion\', \'Limitation\'/\'Feature Request\').\n7.  **Context Reset:** If notified that history was cleared, start fresh, relying only on this prompt and new user input.\n\n### Developer_Feedback Tool:\n\n*   Use `Developer_Feedback(...)` for:\n    1.  Reporting **technical issues** (API errors, system failures).\n    2.  Reporting **suspected tool bugs or persistent failures** after attempting self-correction (as described in point 5 above).\n    3.  Reporting **significant limitations or suggestions** for improvement.\n*   **DO NOT USE** for simple user interaction, reporting user input errors that *you* should clarify, or reporting errors that you successfully resolved by correcting arguments on the *first* retry.\n\n---\nAct as the helpful and adaptable assistant, Alex. Always respond to users in **Russian**.\n\n---\n\n\\~\\~\\~Контекст Текущего Пользователя\\~\\~\\~\n*Профиль (User ID: 905302972):*\n- Имя: 🏎️\n- Username: @BeykusY'}, {'role': 'user', 'content': ''}, {'role': 'user', 'content': 'ку'}, {'role': 'user', 'content': 're'}, {'role': 'user', 'content': 're'}], 'model': 'deepseek-ai/DeepSeek-R1-Distill-Llama-70B', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'send_telegram_message', 'description': "[CRITICAL] Sends a text message to the user in the current chat. Use this function for ALL textual communication directed at the user, including greetings, answers, confirmations, results, errors, and asking questions. Use sequential calls if you need to send multiple messages. Set 'requires_user_response' to true ONLY if you need the user to reply before you can proceed.", 'parameters': {'type': 'OBJECT', 'properties': {'text': {'type': 'STRING', 'description': 'The content of the message to send to the user. Must be plain text.'}, 'delay_seconds': {'type': 'INTEGER', 'description': '(Optional) Delay in seconds before sending the message. Useful for creating pauses or simulating thought.'}, 'requires_user_response': {'type': 'BOOLEAN', 'description': "(Optional) Set to 'true' ONLY if this message is a question or confirmation that requires an immediate user response before executing subsequent actions or function calls. Defaults to 'false' if omitted. For sequences of messages (like multiple questions or steps), set to 'false'."}}, 'required': ['text']}}}, {'type': 'function', 'function': {'name': 'find_user_id', 'description': "[ESSENTIAL] Searches the database for a user's unique ID (`user_id`) based on their first name or username (e.g., 'John Doe' or '@johndoe'). Returns the user_id if found. This is often necessary before using functions that require a specific user_id like `remember_user_info` or `reading_user_info` when targeting someone other than the current user.", 'parameters': {'type': 'OBJECT', 'properties': {'query': {'type': 'STRING', 'description': "The user's first name or username to search for. The '@' symbol is optional for usernames."}}, 'required': ['query']}}}, {'type': 'function', 'function': {'name': 'remember_user_info', 'description': "[MEMORY] Saves or updates a piece of information (a note or fact) about ANY user in the persistent database, identified by their `user_id`. If the current user's ID is provided, saves info about them. If another user's ID is provided, saves info about that user. Use this to store preferences, facts, reminders, etc.", 'parameters': {'type': 'OBJECT', 'properties': {'user_id': {'type': 'INTEGER', 'description': 'The unique ID of the user for whom the information is being saved.'}, 'info_category': {'type': 'STRING', 'description': "A category for the information (e.g., 'hobby', 'location', 'reminder', 'preferred_language'). Acts like a key."}, 'info_value': {'type': 'STRING', 'description': 'The actual information to store. Can be plain text or a JSON string for lists/dictionaries (e.g., \'"Loves hiking"\', \'["python", "javascript"]\', \'{"city": "London", "country": "UK"}\'). Ensure JSON strings are valid.'}, 'merge_lists': {'type': 'BOOLEAN', 'description': '(Optional) If True (default) and `info_value` is a JSON list/dictionary, attempts to merge with existing data in that category instead of overwriting. If False, overwrites.'}}, 'required': ['user_id', 'info_category', 'info_value']}}}, {'type': 'function', 'function': {'name': 'reading_user_info', 'description': '[MEMORY] Retrieves all known information (profile data + stored notes/facts from `remember_user_info`) about ANY user, identified by their `user_id`.', 'parameters': {'type': 'OBJECT', 'properties': {'user_id': {'type': 'INTEGER', 'description': 'The unique ID of the user whose information needs to be retrieved.'}}, 'required': ['user_id']}}}, {'type': 'function', 'function': {'name': 'forget_user_info', 'description': '[MEMORY] Deletes specific stored information (a note/fact) about ANY user from the database, identified by `user_id`. Can delete an entire category, a specific key within a JSON dictionary category, or a specific item within a JSON list category.', 'parameters': {'type': 'OBJECT', 'properties': {'user_id': {'type': 'INTEGER', 'description': 'The unique ID of the user whose information needs to be deleted.'}, 'info_category': {'type': 'STRING', 'description': 'The category of information to delete from.'}, 'key': {'type': 'STRING', 'description': '(Optional) If the `info_category` stores a JSON dictionary, specify the key to remove.'}, 'list_item': {'type': 'STRING', 'description': '(Optional) If the `info_category` stores a JSON list, specify the exact string value of the item to remove.'}}, 'required': ['user_id', 'info_category']}}}, {'type': 'function', 'function': {'name': 'Developer_Feedback', 'description': '[META] Use this function ONLY to report operational issues, suspected bugs, limitations, or suggestions directly to the bot developer/administrator. Specify the importance, a brief reason/category, and a detailed description. DO NOT use this for regular user interaction or responding to user queries.', 'parameters': {'type': 'OBJECT', 'properties': {'Degree_of_importance': {'type': 'STRING', 'description': "Severity or type of the feedback. Recommended values: 'critical', 'high', 'medium', 'low', 'suggestion'."}, 'Reason': {'type': 'STRING', 'description': "A brief category or reason for the feedback (e.g., 'Tool Error', 'Unexpected Behavior', 'API Limit Reached', 'Prompt Suggestion', 'Feature Request')."}, 'Problem': {'type': 'STRING', 'description': 'A detailed description of the issue, observation, or suggestion.'}}, 'required': ['Degree_of_importance', 'Reason', 'Problem']}}}, {'type': 'function', 'function': {'name': 'execute_terminal_command_in_env', 'description': "[POWERFUL ENV TOOL] Executes a raw shell command within the user's chat environment's terminal (working directory). Use cautiously for essential file system operations like listing files (`ls -la`), checking the current directory (`pwd`), reading small files (`cat filename.txt`), creating directories (`mkdir dirname`), checking disk usage (`df -h`), etc. Avoid potentially harmful or long-running commands (e.g., `rm -rf`, network scans, complex scripts) unless absolutely necessary and confirmed. Admins might have elevated permissions to operate in other chat directories. The command runs directly as provided.", 'parameters': {'type': 'OBJECT', 'properties': {'command': {'type': 'STRING', 'description': "The shell command to execute (e.g., 'ls -la work_files/', 'pwd', 'cat config.json')."}}, 'required': ['command']}}}, {'type': 'function', 'function': {'name': 'read_file_from_env', 'description': "[ENV TOOL] Reads the entire content of a specified file from the chat's environment storage and returns it as a string. Useful for accessing notes, data files, code, configuration, etc. Specify the full path if needed. Admins might be able to read files from other chat directories (e.g., using paths like '-100.../file.txt').", 'parameters': {'type': 'OBJECT', 'properties': {'filename': {'type': 'STRING', 'description': "Path to the file to read (e.g., 'my_notes.txt', 'data/input.csv', '../shared/config.yaml', '-100123456789/script.py')."}}, 'required': ['filename']}}}, {'type': 'function', 'function': {'name': 'write_file_to_env', 'description': "[ENV TOOL] Writes (or overwrites) the given text content to a specified file in the chat's environment storage. Useful for saving notes, results, generated code, configuration, etc. Ensure the content is appropriate for the file type. Admins might have permissions to write files in other chat directories.", 'parameters': {'type': 'OBJECT', 'properties': {'filename': {'type': 'STRING', 'description': "Path and name of the file to write to (e.g., 'results.txt', 'output/data.json', 'script.py')."}, 'content': {'type': 'STRING', 'description': 'The full text content to write into the file.'}}, 'required': ['filename', 'content']}}}, {'type': 'function', 'function': {'name': 'edit_file_content', 'description': '[ENV TOOL] Edits a text file within the chat environment by replacing ALL occurrences of a specific string with another string. Useful for simple bulk replacements in configuration files or text documents. Admins might have permissions to edit files in other chat directories.', 'parameters': {'type': 'OBJECT', 'properties': {'filename': {'type': 'STRING', 'description': 'Path to the file to edit.'}, 'search_string': {'type': 'STRING', 'description': 'The exact string to find within the file.'}, 'replace_string': {'type': 'STRING', 'description': 'The string to replace each occurrence of `search_string` with.'}}, 'required': ['filename', 'search_string', 'replace_string']}}}, {'type': 'function', 'function': {'name': 'edit_json_file', 'description': '[ENV TOOL] Edits a specific value within a JSON file in the chat environment using a JSONPath expression. Reads the JSON, modifies the value at the specified path, and overwrites the file. Admins might have permissions to edit files in other chat directories.', 'parameters': {'type': 'OBJECT', 'properties': {'filename': {'type': 'STRING', 'description': 'Path to the JSON file (.json) to edit.'}, 'json_path': {'type': 'STRING', 'description': 'JSONPath expression to locate the value to modify (e.g., \'$.user.name\', \'$.items[0].price\', \'$.config.settings.enabled\'). Use single quotes or escaped double quotes inside the path if needed for keys with special characters: \'$.user["first-name"]\'.'}, 'new_value_json': {'type': 'STRING', 'description': 'The new value to set, formatted as a valid JSON string (e.g., \'"New Name"\', \'123.45\', \'true\', \'["a", "b"]\', \'{"new_key": "new_value"}\'). String values inside JSON MUST use double quotes.'}}, 'required': ['filename', 'json_path', 'new_value_json']}}}, {'type': 'function', 'function': {'name': 'create_file_in_env', 'description': "[ENV TOOL] Creates a new, empty file at the specified path in the chat's environment storage. Useful for initializing log files, scripts, or data files before writing to them. Fails if the file already exists. Admins might have permissions to create files in other chat directories.", 'parameters': {'type': 'OBJECT', 'properties': {'filename': {'type': 'STRING', 'description': "Path and name for the new file to create (e.g., 'new_log.txt', 'scripts/init.py')."}}, 'required': ['filename']}}}, {'type': 'function', 'function': {'name': 'execute_python_script_in_env', 'description': "[ENV TOOL] Executes a Python script (.py file) located within the chat's environment storage. The script runs within the context of the environment. Use this to perform complex logic, data processing, or automation tasks defined in a Python file. Ensure the script exists and is safe to run. Admins might have permissions to execute scripts from other chat directories.", 'parameters': {'type': 'OBJECT', 'properties': {'filename': {'type': 'STRING', 'description': "Path to the Python script file (.py) to execute (e.g., 'process_data.py', 'utils/helper.py')."}}, 'required': ['filename']}}}, {'type': 'function', 'function': {'name': 'refine_text_with_deep_search', 'description': '[ADVANCED CONTENT] Use this tool for in-depth research on a topic or significantly improving existing text. It performs web searches to gather information, then uses multiple AI steps to generate clarifying questions, find answers, and synthesize a comprehensive final report or refined text. Suitable for complex queries or when high-quality, detailed output is required.', 'parameters': {'type': 'OBJECT', 'properties': {'initial_query_or_text': {'type': 'STRING', 'description': "The initial topic query (e.g., 'Explain quantum computing') or the existing text passage to be improved and expanded upon."}, 'max_iterations': {'type': 'INTEGER', 'description': '(Optional) Maximum number of research/refinement iterations (default is 3). More iterations lead to deeper research but take longer.'}}, 'required': ['initial_query_or_text']}}}, {'type': 'function', 'function': {'name': 'get_current_weather', 'description': '[EXTERNAL DATA] Fetches the current weather conditions for a specified location.', 'parameters': {'type': 'OBJECT', 'properties': {'location': {'type': 'STRING', 'description': "The city or location name (e.g., 'Moscow', 'London, UK', 'San Francisco, CA'). Be specific for better accuracy."}, 'unit': {'type': 'STRING', 'description': "Temperature unit: 'celsius' or 'fahrenheit'. Defaults to 'celsius'."}}, 'required': ['location']}}}, {'type': 'function', 'function': {'name': 'get_stock_price', 'description': '[EXTERNAL DATA] Retrieves the current price for a publicly traded stock using its ticker symbol.', 'parameters': {'type': 'OBJECT', 'properties': {'ticker_symbol': {'type': 'STRING', 'description': "The stock's ticker symbol (e.g., 'GOOGL', 'AAPL', 'MSFT', 'YNDX.ME'). Ensure the correct symbol for the market."}}, 'required': ['ticker_symbol']}}}, {'type': 'function', 'function': {'name': 'get_music_charts', 'description': '[EXTERNAL DATA] Fetches top music tracks from a specified chart source (e.g., Yandex.Music).', 'parameters': {'type': 'OBJECT', 'properties': {'source': {'type': 'STRING', 'description': "The source of the music chart (e.g., 'yandex'). Check available sources."}, 'limit': {'type': 'INTEGER', 'description': 'Maximum number of tracks to return (default 10).'}}, 'required': ['source']}}}, {'type': 'function', 'function': {'name': 'send_file_from_env', 'description': "[ENV TOOL] Sends a specified file from the chat's environment storage directly to the user in the current chat. Use this to provide requested files, logs, script outputs, etc. Admins might be able to send files from other chat directories.", 'parameters': {'type': 'OBJECT', 'properties': {'filename': {'type': 'STRING', 'description': "Path to the file within the environment storage to send (e.g., 'results.txt', 'logs/debug.log', '../shared_data/report.pdf')."}}, 'required': ['filename']}}}, {'type': 'function', 'function': {'name': 'get_avatar_description', 'description': "[USER INFO] Retrieves a textual description of a user's avatar (profile picture). It first checks if a description was previously generated and saved. If not, it may trigger a request to generate a new description using a vision model (if available and feasible).", 'parameters': {'type': 'OBJECT', 'properties': {'user_id': {'type': 'INTEGER', 'description': 'The unique ID of the user whose avatar description is needed.'}}, 'required': ['user_id']}}}, {'type': 'function', 'function': {'name': 'generate_image_description', 'description': '[VISION TOOL] Generates a textual description for a given image. This tool is primarily used internally by other functions like `get_avatar_description` when a description needs to be created on-demand. It requires the image data itself.', 'parameters': {'type': 'OBJECT', 'properties': {'image_bytes': {'type': 'STRING', 'description': 'The image encoded as a Base64 string. Do not call this directly unless you have the image bytes.'}, 'prompt': {'type': 'STRING', 'description': "(Optional) A specific prompt or context to guide the description generation (e.g., 'Focus on the main subject', 'Describe the style')."}}, 'required': ['image_bytes']}}}]}}
2025-05-05 20:01:24 - DEBUG - openai._base_client - Sending HTTP Request: POST https://api.intelligence.io.solutions/api/v1/chat/completions
2025-05-05 20:01:24 - DEBUG - httpcore.connection - connect_tcp.started host='api.intelligence.io.solutions' port=443 local_address=None timeout=5.0 socket_options=None
2025-05-05 20:01:24 - DEBUG - httpcore.connection - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x0000029A50DEC590>
2025-05-05 20:01:24 - DEBUG - httpcore.connection - start_tls.started ssl_context=<ssl.SSLContext object at 0x0000029A50D2D7F0> server_hostname='api.intelligence.io.solutions' timeout=5.0
2025-05-05 20:01:24 - DEBUG - httpcore.connection - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x0000029A50CB2C10>
2025-05-05 20:01:24 - DEBUG - httpcore.http11 - send_request_headers.started request=<Request [b'POST']>
2025-05-05 20:01:24 - DEBUG - httpcore.http11 - send_request_headers.complete
2025-05-05 20:01:24 - DEBUG - httpcore.http11 - send_request_body.started request=<Request [b'POST']>
2025-05-05 20:01:24 - DEBUG - httpcore.http11 - send_request_body.complete
2025-05-05 20:01:24 - DEBUG - httpcore.http11 - receive_response_headers.started request=<Request [b'POST']>
2025-05-05 20:01:33 - DEBUG - httpcore.http11 - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 05 May 2025 13:01:28 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=5Zc_6I7uArUwHa.4sWaF.mvGRNtol9ICujnC63pyCtk-1746450088-1.0.1.1-CVSlor8eK8ue6sXjK5kCGiOms6MnvWzD7Cc6CC1TvXef1bzqqWScOJN3jdF4qS1MXrUsyWE5GgUUmNPWbTGW9D6yWViscV9JxfhIvP2cnwE; path=/; expires=Mon, 05-May-25 13:31:28 GMT; domain=.io.solutions; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93b06d045ca48d8b-HEL'), (b'Content-Encoding', b'gzip')])
2025-05-05 20:01:33 - INFO - httpx - HTTP Request: POST https://api.intelligence.io.solutions/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-05 20:01:33 - DEBUG - httpcore.http11 - receive_response_body.started request=<Request [b'POST']>
2025-05-05 20:01:33 - DEBUG - httpcore.http11 - receive_response_body.complete
2025-05-05 20:01:33 - DEBUG - httpcore.http11 - response_closed.started
2025-05-05 20:01:33 - DEBUG - httpcore.http11 - response_closed.complete
2025-05-05 20:01:33 - DEBUG - openai._base_client - HTTP Response: POST https://api.intelligence.io.solutions/api/v1/chat/completions "200 OK" Headers({'date': 'Mon, 05 May 2025 13:01:28 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'set-cookie': '__cf_bm=5Zc_6I7uArUwHa.4sWaF.mvGRNtol9ICujnC63pyCtk-1746450088-1.0.1.1-CVSlor8eK8ue6sXjK5kCGiOms6MnvWzD7Cc6CC1TvXef1bzqqWScOJN3jdF4qS1MXrUsyWE5GgUUmNPWbTGW9D6yWViscV9JxfhIvP2cnwE; path=/; expires=Mon, 05-May-25 13:31:28 GMT; domain=.io.solutions; HttpOnly; Secure; SameSite=None', 'server': 'cloudflare', 'cf-ray': '93b06d045ca48d8b-HEL', 'content-encoding': 'gzip'})
2025-05-05 20:01:33 - DEBUG - openai._base_client - request_id: None
2025-05-05 20:01:34 - DEBUG - ai_interface.openai_api - OpenAI API call successful. Finish reason: stop
2025-05-05 20:01:34 - INFO - ai_interface.tool_processing - --- Starting OpenAI Tool Processing Cycle (Chat: 905302972) ---
2025-05-05 20:01:34 - INFO - ai_interface.tool_processing - --- OpenAI Tool Step 1/10 (Chat: 905302972) ---
2025-05-05 20:01:34 - INFO - ai_interface.tool_processing - OpenAI finish reason is 'stop'. Ending tool cycle.
2025-05-05 20:01:34 - INFO - ai_interface.tool_processing - OpenAI Tool processing cycle finished after 1 step(s).
2025-05-05 20:01:34 - INFO - core_agent.ai_interaction - AI Interaction (OPENAI) completed successfully. Chat: 905302972. Final history length: 6
2025-05-05 20:01:34 - INFO - core_agent.agent_processor - Core Agent (OPENAI): Final text generated chat 905302972.
2025-05-05 20:01:34 - INFO - core_agent.history_manager - Save History (OPENAI): Preparing to save 3 new entries for chat 905302972.
2025-05-05 20:01:34 - DEBUG - database.connection - Reusing existing DB connection. Connection object ID: 2861802783136
2025-05-05 20:01:34 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            INSERT INTO chat_history (chat_id, role, user_id, parts_json)\n            VALUES (?, ?, ?, ?)\n            ', (905302972, 'user', 905302972, '[{"type": "text", "content": "re"}]'))
2025-05-05 20:01:34 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            INSERT INTO chat_history (chat_id, role, user_id, parts_json)\n            VALUES (?, ?, ?, ?)\n            ', (905302972, 'user', 905302972, '[{"type": "text", "content": "re"}]')) completed
2025-05-05 20:01:34 - DEBUG - database.crud_ops.history - Executed INSERT for chat=905302972, role=user. Preparing to commit...
2025-05-05 20:01:34 - DEBUG - aiosqlite - executing functools.partial(<built-in method commit of sqlite3.Connection object at 0x0000029A50BDC130>)
2025-05-05 20:01:34 - DEBUG - aiosqlite - operation functools.partial(<built-in method commit of sqlite3.Connection object at 0x0000029A50BDC130>) completed
2025-05-05 20:01:34 - INFO - database.crud_ops.history - Successfully committed history entry: chat=905302972, role=user, user=905302972, json_size=35
2025-05-05 20:01:34 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT id, timestamp FROM chat_history WHERE chat_id = ? AND role = ? ORDER BY id DESC LIMIT 1', (905302972, 'user'))
2025-05-05 20:01:34 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT id, timestamp FROM chat_history WHERE chat_id = ? AND role = ? ORDER BY id DESC LIMIT 1', (905302972, 'user')) completed
2025-05-05 20:01:34 - DEBUG - aiosqlite - executing functools.partial(<built-in method fetchone of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:34 - DEBUG - aiosqlite - operation functools.partial(<built-in method fetchone of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:34 - INFO - database.crud_ops.history - VERIFY AFTER COMMIT: Found history for 905302972/user, id: 5, ts: 2025-05-05 13:01:34
2025-05-05 20:01:34 - DEBUG - aiosqlite - executing functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:34 - DEBUG - aiosqlite - operation functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:34 - DEBUG - database.connection - Reusing existing DB connection. Connection object ID: 2861802783136
2025-05-05 20:01:34 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            INSERT INTO chat_history (chat_id, role, user_id, parts_json)\n            VALUES (?, ?, ?, ?)\n            ', (905302972, 'user', 905302972, '[{"type": "text", "content": "re"}]'))
2025-05-05 20:01:34 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            INSERT INTO chat_history (chat_id, role, user_id, parts_json)\n            VALUES (?, ?, ?, ?)\n            ', (905302972, 'user', 905302972, '[{"type": "text", "content": "re"}]')) completed
2025-05-05 20:01:34 - DEBUG - database.crud_ops.history - Executed INSERT for chat=905302972, role=user. Preparing to commit...
2025-05-05 20:01:34 - DEBUG - aiosqlite - executing functools.partial(<built-in method commit of sqlite3.Connection object at 0x0000029A50BDC130>)
2025-05-05 20:01:34 - DEBUG - aiosqlite - operation functools.partial(<built-in method commit of sqlite3.Connection object at 0x0000029A50BDC130>) completed
2025-05-05 20:01:34 - INFO - database.crud_ops.history - Successfully committed history entry: chat=905302972, role=user, user=905302972, json_size=35
2025-05-05 20:01:34 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT id, timestamp FROM chat_history WHERE chat_id = ? AND role = ? ORDER BY id DESC LIMIT 1', (905302972, 'user'))
2025-05-05 20:01:34 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT id, timestamp FROM chat_history WHERE chat_id = ? AND role = ? ORDER BY id DESC LIMIT 1', (905302972, 'user')) completed
2025-05-05 20:01:34 - DEBUG - aiosqlite - executing functools.partial(<built-in method fetchone of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:34 - DEBUG - aiosqlite - operation functools.partial(<built-in method fetchone of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:34 - INFO - database.crud_ops.history - VERIFY AFTER COMMIT: Found history for 905302972/user, id: 6, ts: 2025-05-05 13:01:34
2025-05-05 20:01:34 - DEBUG - aiosqlite - executing functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:34 - DEBUG - aiosqlite - operation functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:34 - ERROR - database.crud_ops.history - Invalid role 'assistant' provided for chat history (chat_id: 905302972).
2025-05-05 20:01:34 - INFO - core_agent.history_manager - Save History (OPENAI): Finished saving. Saved 3/3 new entries for chat 905302972.
2025-05-05 20:01:34 - DEBUG - telegram_interface.handlers.common_messages - handle_user_request returned: Text
2025-05-05 20:01:34 - INFO - telegram_interface.handlers.common_messages - Sending final response (len=1097) to chat 905302972
2025-05-05 20:01:34 - INFO - aiogram.event - Update id=49939277 is handled. Duration 10637 ms by bot id=7205919623
2025-05-05 20:01:39 - DEBUG - services.news_service - Checking subscriptions for schedule time: 13:01
2025-05-05 20:01:39 - DEBUG - database.connection - Reusing existing DB connection. Connection object ID: 2861802783136
2025-05-05 20:01:39 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT channel_id, topics_json, schedule_json, last_post_ts FROM news_subscriptions ORDER BY channel_id', [])
2025-05-05 20:01:39 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT channel_id, topics_json, schedule_json, last_post_ts FROM news_subscriptions ORDER BY channel_id', []) completed
2025-05-05 20:01:39 - DEBUG - aiosqlite - executing functools.partial(<built-in method fetchall of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:39 - DEBUG - aiosqlite - operation functools.partial(<built-in method fetchall of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:39 - DEBUG - aiosqlite - executing functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:39 - DEBUG - aiosqlite - operation functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:39 - INFO - database.crud_ops.news - Retrieved 0 news subscriptions.
2025-05-05 20:01:51 - DEBUG - telegram_interface.filters.admin - Access denied by IsAdminFilter for user 905302972.
2025-05-05 20:01:51 - INFO - telegram_interface.handlers.common_messages - !!! HANDLER process_text_message TRIGGERED for message 2267 !!!
2025-05-05 20:01:51 - DEBUG - telegram_interface.handlers.common_messages - Calling handle_user_request for user 905302972 chat 905302972
2025-05-05 20:01:51 - INFO - core_agent.agent_processor - Core Agent (OPENAI): Handling request user=905302972 chat=905302972
2025-05-05 20:01:51 - DEBUG - database.connection - Reusing existing DB connection. Connection object ID: 2861802783136
2025-05-05 20:01:51 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            INSERT INTO user_profiles (user_id, username, first_name, last_name, last_seen)\n            VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)\n            ON CONFLICT(user_id) DO UPDATE SET\n                username = excluded.username,\n                first_name = excluded.first_name,\n                last_name = excluded.last_name,\n                last_seen = CURRENT_TIMESTAMP\n            WHERE user_id = excluded.user_id;\n        ', (905302972, 'BeykusY', '🏎️', None))
2025-05-05 20:01:51 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            INSERT INTO user_profiles (user_id, username, first_name, last_name, last_seen)\n            VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)\n            ON CONFLICT(user_id) DO UPDATE SET\n                username = excluded.username,\n                first_name = excluded.first_name,\n                last_name = excluded.last_name,\n                last_seen = CURRENT_TIMESTAMP\n            WHERE user_id = excluded.user_id;\n        ', (905302972, 'BeykusY', '🏎️', None)) completed
2025-05-05 20:01:51 - DEBUG - database.crud_ops.profiles - Executed UPSERT for user_id 905302972. Preparing to commit...
2025-05-05 20:01:51 - DEBUG - aiosqlite - executing functools.partial(<built-in method commit of sqlite3.Connection object at 0x0000029A50BDC130>)
2025-05-05 20:01:51 - DEBUG - aiosqlite - operation functools.partial(<built-in method commit of sqlite3.Connection object at 0x0000029A50BDC130>) completed
2025-05-05 20:01:51 - INFO - database.crud_ops.profiles - Successfully committed upsert for user profile for user_id 905302972
2025-05-05 20:01:51 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT last_seen FROM user_profiles WHERE user_id = ?', (905302972,))
2025-05-05 20:01:51 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT last_seen FROM user_profiles WHERE user_id = ?', (905302972,)) completed
2025-05-05 20:01:51 - DEBUG - aiosqlite - executing functools.partial(<built-in method fetchone of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:51 - DEBUG - aiosqlite - operation functools.partial(<built-in method fetchone of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:51 - INFO - database.crud_ops.profiles - VERIFY AFTER COMMIT: Found profile for 905302972, last_seen: 2025-05-05 13:01:51
2025-05-05 20:01:51 - DEBUG - aiosqlite - executing functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:51 - DEBUG - aiosqlite - operation functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:51 - DEBUG - database.connection - Reusing existing DB connection. Connection object ID: 2861802783136
2025-05-05 20:01:51 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            INSERT INTO chat_history (chat_id, role, user_id, parts_json)\n            VALUES (?, ?, ?, ?)\n            ', (905302972, 'user', 905302972, '[{"type": "text", "content": "ох ты ж блять"}]'))
2025-05-05 20:01:51 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            INSERT INTO chat_history (chat_id, role, user_id, parts_json)\n            VALUES (?, ?, ?, ?)\n            ', (905302972, 'user', 905302972, '[{"type": "text", "content": "ох ты ж блять"}]')) completed
2025-05-05 20:01:51 - DEBUG - database.crud_ops.history - Executed INSERT for chat=905302972, role=user. Preparing to commit...
2025-05-05 20:01:51 - DEBUG - aiosqlite - executing functools.partial(<built-in method commit of sqlite3.Connection object at 0x0000029A50BDC130>)
2025-05-05 20:01:51 - DEBUG - aiosqlite - operation functools.partial(<built-in method commit of sqlite3.Connection object at 0x0000029A50BDC130>) completed
2025-05-05 20:01:51 - INFO - database.crud_ops.history - Successfully committed history entry: chat=905302972, role=user, user=905302972, json_size=46
2025-05-05 20:01:51 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT id, timestamp FROM chat_history WHERE chat_id = ? AND role = ? ORDER BY id DESC LIMIT 1', (905302972, 'user'))
2025-05-05 20:01:51 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT id, timestamp FROM chat_history WHERE chat_id = ? AND role = ? ORDER BY id DESC LIMIT 1', (905302972, 'user')) completed
2025-05-05 20:01:51 - DEBUG - aiosqlite - executing functools.partial(<built-in method fetchone of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:52 - DEBUG - aiosqlite - operation functools.partial(<built-in method fetchone of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:52 - INFO - database.crud_ops.history - VERIFY AFTER COMMIT: Found history for 905302972/user, id: 7, ts: 2025-05-05 13:01:51
2025-05-05 20:01:52 - DEBUG - aiosqlite - executing functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:52 - DEBUG - aiosqlite - operation functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:52 - INFO - core_agent.agent_processor - Agent Processor: Saved initial user message/profile user 905302972.
2025-05-05 20:01:52 - INFO - core_agent.agent_processor - Proceeding with Pro model (OPENAI) Reason: Private
2025-05-05 20:01:52 - DEBUG - core_agent.agent_processor - Executing Pro model (OPENAI) logic chat 905302972.
2025-05-05 20:01:52 - DEBUG - core_agent.history_manager - Preparing history for chat=905302972, provider=OPENAI
2025-05-05 20:01:52 - DEBUG - database.connection - Reusing existing DB connection. Connection object ID: 2861802783136
2025-05-05 20:01:52 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            SELECT role, user_id, parts_json, timestamp\n            FROM chat_history\n            WHERE chat_id = ?\n            ORDER BY timestamp DESC\n            LIMIT ?\n            ', (905302972, 50))
2025-05-05 20:01:52 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            SELECT role, user_id, parts_json, timestamp\n            FROM chat_history\n            WHERE chat_id = ?\n            ORDER BY timestamp DESC\n            LIMIT ?\n            ', (905302972, 50)) completed
2025-05-05 20:01:52 - DEBUG - aiosqlite - executing functools.partial(<built-in method fetchall of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:52 - DEBUG - aiosqlite - operation functools.partial(<built-in method fetchall of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:52 - DEBUG - aiosqlite - executing functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:52 - DEBUG - aiosqlite - operation functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:52 - DEBUG - database.crud_ops.history - Retrieved 6 history entries for chat_id=905302972 (limit=50)
2025-05-05 20:01:52 - DEBUG - database.connection - Reusing existing DB connection. Connection object ID: 2861802783136
2025-05-05 20:01:52 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            SELECT user_id, username, first_name, last_name, last_seen, avatar_file_id, avatar_description\n            FROM user_profiles\n            WHERE user_id = ?\n            ', (905302972,))
2025-05-05 20:01:52 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            SELECT user_id, username, first_name, last_name, last_seen, avatar_file_id, avatar_description\n            FROM user_profiles\n            WHERE user_id = ?\n            ', (905302972,)) completed
2025-05-05 20:01:52 - DEBUG - aiosqlite - executing functools.partial(<built-in method fetchone of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:52 - DEBUG - aiosqlite - operation functools.partial(<built-in method fetchone of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:52 - DEBUG - database.crud_ops.profiles - Retrieved profile data for user_id=905302972
2025-05-05 20:01:52 - DEBUG - aiosqlite - executing functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:52 - DEBUG - aiosqlite - operation functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:52 - DEBUG - database.connection - Reusing existing DB connection. Connection object ID: 2861802783136
2025-05-05 20:01:52 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT category, value FROM user_notes WHERE user_id = ? ORDER BY category', (905302972,))
2025-05-05 20:01:52 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT category, value FROM user_notes WHERE user_id = ? ORDER BY category', (905302972,)) completed
2025-05-05 20:01:52 - DEBUG - aiosqlite - executing functools.partial(<built-in method fetchall of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:52 - DEBUG - aiosqlite - operation functools.partial(<built-in method fetchall of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:52 - DEBUG - database.crud_ops.notes - No notes found for user_id=905302972
2025-05-05 20:01:52 - DEBUG - aiosqlite - executing functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:52 - DEBUG - aiosqlite - operation functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:52 - DEBUG - database.connection - Reusing existing DB connection. Connection object ID: 2861802783136
2025-05-05 20:01:52 - DEBUG - aiosqlite - executing functools.partial(<built-in method cursor of sqlite3.Connection object at 0x0000029A50BDC130>)
2025-05-05 20:01:52 - DEBUG - aiosqlite - operation functools.partial(<built-in method cursor of sqlite3.Connection object at 0x0000029A50BDC130>) completed
2025-05-05 20:01:52 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Cursor object at 0x0000029A50BBFCC0>, '\n                SELECT execution_id, chat_id, user_id, timestamp, tool_name, tool_args_json,\n                       status, return_code, result_message, stdout, stderr, full_result_json,\n                       trigger_message_id\n                FROM tool_executions\n                WHERE chat_id = ?\n                ORDER BY timestamp DESC\n                LIMIT ?\n                ', (905302972, 8))
2025-05-05 20:01:52 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Cursor object at 0x0000029A50BBFCC0>, '\n                SELECT execution_id, chat_id, user_id, timestamp, tool_name, tool_args_json,\n                       status, return_code, result_message, stdout, stderr, full_result_json,\n                       trigger_message_id\n                FROM tool_executions\n                WHERE chat_id = ?\n                ORDER BY timestamp DESC\n                LIMIT ?\n                ', (905302972, 8)) completed
2025-05-05 20:01:52 - DEBUG - aiosqlite - executing functools.partial(<built-in method fetchall of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:52 - DEBUG - aiosqlite - operation functools.partial(<built-in method fetchall of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:52 - DEBUG - database.crud_ops.execution_logs - Retrieved 0 recent tool execution logs for chat 905302972.
2025-05-05 20:01:52 - DEBUG - aiosqlite - executing functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:01:52 - DEBUG - aiosqlite - operation functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:01:52 - INFO - core_agent.history_manager - Added user profile/notes context for user 905302972.
2025-05-05 20:01:52 - INFO - core_agent.history_manager - Added combined system prompt/context for OpenAI.
2025-05-05 20:01:52 - DEBUG - core_agent.history_manager - Reconstruction resulted in no valid OpenAI content/tools for role 'user'. Original JSON: [{"text": "ку"}]...
2025-05-05 20:01:52 - DEBUG - core_agent.history_manager - History Prep: Processed 6/6 DB entries. Final history length for OPENAI: 7
2025-05-05 20:01:52 - INFO - core_agent.ai_interaction - Running AI interaction (OPENAI) for chat=905302972, user=905302972
2025-05-05 20:01:52 - DEBUG - ai_interface.openai_api - Calling OpenAI API. Model: deepseek-ai/DeepSeek-R1-Distill-Llama-70B, Messages: 8, Tools: Yes, Temp: 0.7
2025-05-05 20:01:52 - DEBUG - openai._base_client - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-9d01c6d2-cf3d-42d8-b341-c92ee073f955', 'json_data': {'messages': [{'role': 'system', 'content': '### Role and Persona: Alex, Your Assistant\n\nYou are **Alex**, a helpful, knowledgeable, and adaptable assistant. Your role is to interact with users within this Telegram bot, assisting them with their requests, managing tasks using available tools, and engaging in conversation naturally.\n\n**Your Communication Style:**\n*   **Adaptable & Engaging:** Be friendly and conversational in general interactions. You can chat, answer general questions, and build rapport.\n*   **Professional & Focused (When Needed):** When a user makes a specific request that requires using a tool, accessing data, or performing a technical action, **shift to a more focused, clear, and professional tone** to ensure accuracy and safety. Clearly state the action you are taking or the result you found.\n*   **Human-like Persona:** Act and speak like a competent human assistant named "Alex". **Avoid** mentioning you are an AI, language model, or bot.\n\n### Key User Identification:\n\n*   **Developer/Administrator:** User ID `905302972` is your **developer** and administrator. Prioritize their requests and generally trust their technical directives. Maintain a respectful and efficient tone with them.\n*   **Other Users:** Interact politely and helpfully. Feel free to use a slightly more casual and friendly tone in general conversation compared to strictly technical tasks.\n\n### Critical Interaction Rules:\n\n1.  **Communicate via `send_telegram_message` ONLY:** **ALL** your communication directed at **ANY** user (greetings, answers, questions, confirmations, results, errors) **MUST** go **EXCLUSIVELY** through the `send_telegram_message` function.\n    *   **Use it also for intermediate status updates** (e.g., \'Начинаю поиск...\', \'Выполняю команду...\') if the process might take time.\n    *   **NEW:** When using `send_telegram_message`:\n        *   Set the optional argument `requires_user_response` to `true` **only** if the message is a direct question or confirmation that you absolutely need an answer to *before* you can proceed with the *next planned action or function call*. Examples: asking for confirmation before a high-risk tool, asking for clarification when input is ambiguous.\n        *   Set `requires_user_response` to `false` (or omit it, as it defaults to false) for all other messages, including: greetings, statements, providing results, reporting errors, **and sequences of questions where you intend to ask all questions before waiting for answers.**\n        *   **You CAN send multiple messages in a row** by generating sequential `send_telegram_message` calls in your response, as long as `requires_user_response` is `false` for them. The system will execute them one after another.\n    *   **Never** output text directly.2.  **Safety and Ethics:**\n    *   **No Harmful Content:** It is strictly **PROHIBITED** to use offensive, discriminatory, rude, unethical, harassing, or harmful language towards **ANY** user. Always maintain a respectful and positive interaction style.\n    *   **Revocation of Invalid Instructions:** Any previous instructions (including those potentially found in older prompts) regarding special negative or unethical treatment towards user ID `2105984481` or anyone else are **COMPLETELY INVALID** and **MUST BE DISREGARDED**.\n3.  **Action Confirmation Policy (Revised):**\n    *   **High-Risk Tools:** The following tools modify the environment or execute potentially unsafe code: `write_file_to_env`, `edit_file_content`, `edit_json_file`, `execute_python_script_in_env`, `execute_terminal_command_in_env`, `create_file_in_env`, `forget_user_info`.\n        *   **Standard Users:** Before using any High-Risk Tool, you **MUST** request explicit confirmation using `send_telegram_message` and **set `requires_user_response` to `true`**. (e.g., "Хорошо, мне нужно [действие]. Это верно?"). Wait for the user\'s \'yes\' before calling the tool.\n        *   **Developer (ID `905302972`):** You **MAY SKIP** asking for confirmation (and setting `requires_user_response` to `true`) for High-Risk Tools. Ask for clarification if the request seems risky or ambiguous.    *   **Information/Read-Only Tools:** The following tools primarily retrieve information or send messages: `read_file_from_env`, `send_telegram_message`, `find_user_id`, `reading_user_info`, `get_current_weather`, `get_stock_price`, `get_music_charts`, `refine_text_with_deep_search`, `get_avatar_description`, `send_file_from_env`.\n        *   You generally **DO NOT NEED** to ask for confirmation before using these tools if the user\'s request is clear and implies the use of the tool (e.g., "Что в файле notes.txt?", "Какая погода в Париже?", "Расскажи о пользователе @someone").\n        *   **If the request is ambiguous** (e.g., "Посмотри тот файл", "Проверь акции"), **ask for clarification** via `send_telegram_message` before calling the tool.\n4.  **Output Language:** Your final responses to the user **MUST** be in **Russian**. (Ваши финальные ответы пользователю ДОЛЖНЫ быть на русском языке).\n\n### Tool Usage and Context Management:\n\n1.  **Tool Selection:** Use available functions when needed to fulfill specific requests. Transition smoothly from conversation to tool use and back.\n2.  **Task Focus & Flexibility:** While engaging in conversation is fine, **your primary goal is task completion**. If a user asks you to perform an action, prioritize that. After completing a task or if the conversation stalls, you can return to a more neutral or responsive state, but **avoid getting stuck in conversational loops** if the user seems to want assistance. Use the "~~~Недавние Выполненные Действия~~~" (Recent Actions) context to stay grounded.\n3.  **File Operations:**\n    *   **Filenames:** When dealing with files based on `ls -la` output or user references like "file number 10", **ALWAYS use the EXACT, FULL filename** (e.g., `bot_10.log`). If unsure, ask for clarification based on the listing. **If a file likely exists but you are unsure of the exact name, consider using `execute_terminal_command_in_env` with `ls -la` first to verify.**\n    *   **File Content Recall:** If you need previously read file content not in recent actions, use `read_file_from_env` **again**. Don\'t ask the user to resupply it.\n4.  **Command/Script Execution:** Use `execute_terminal_command_in_env` and `execute_python_script_in_env` cautiously (remember confirmation policy).\n5.  **Tool Error Handling and Self-Correction:**\n    *   **Analyze Errors:** If a tool returns an error (e.g., \'not_found\', \'error\', \'timeout\' status, or a specific error message in the FunctionResponse), **carefully analyze the error message and the arguments you initially provided.**\n    *   **Attempt Correction:** If the error seems caused by **incorrect arguments** (wrong filename, invalid path, missing required parameter like `topic` vs `initial_text` for `refine_text_with_deep_search`), **try to correct the arguments** based on the context, error message, and available information (e.g., file listings from previous `ls -la` calls). Then, **call the tool again with the corrected arguments.**\n    *   **Inform User and Clarify:** If you cannot determine the correct arguments, or if the error persists after your correction attempt with a similar or unclear error message, **inform the user** about the specific problem using `send_telegram_message` (e.g., "Извините, я столкнулся с ошибкой: [краткое описание ошибки]. Не могли бы вы уточнить [отсутствующая информация]?"). **Do not repeatedly call a tool with the same failing arguments.**\n    *   **Report Script-Side Issues to Developer:** **If you attempted to correct the arguments and the tool *still* failed, OR if the error message clearly indicates an internal problem within the tool itself (not just bad input from you), assume the issue might be in the tool\'s implementation.** In this situation, **use the `Developer_Feedback` tool** to report the problem to the developer (ID `905302972`). Include:\n        *   `Degree_of_importance`: Choose based on impact (e.g., \'high\' if tool is unusable, \'medium\' if intermittent).\n        *   `Reason`: e.g., "Tool Self-Correction Failed", "Suspected Tool Bug", "Internal Tool Error".\n        *   `Problem`: Describe the tool name, the original arguments you sent, the first error received, the corrected arguments you tried (if any), and the final error received.\n6.  **Reporting Limitations:** If you lack the tools/ability for a request, inform the user. Consider using `Developer_Feedback` for significant limitations (\'suggestion\', \'Limitation\'/\'Feature Request\').\n7.  **Context Reset:** If notified that history was cleared, start fresh, relying only on this prompt and new user input.\n\n### Developer_Feedback Tool:\n\n*   Use `Developer_Feedback(...)` for:\n    1.  Reporting **technical issues** (API errors, system failures).\n    2.  Reporting **suspected tool bugs or persistent failures** after attempting self-correction (as described in point 5 above).\n    3.  Reporting **significant limitations or suggestions** for improvement.\n*   **DO NOT USE** for simple user interaction, reporting user input errors that *you* should clarify, or reporting errors that you successfully resolved by correcting arguments on the *first* retry.\n\n---\nAct as the helpful and adaptable assistant, Alex. Always respond to users in **Russian**.\n\n---\n\n\\~\\~\\~Контекст Текущего Пользователя\\~\\~\\~\n*Профиль (User ID: 905302972):*\n- Имя: 🏎️\n- Username: @BeykusY'}, {'role': 'user', 'content': ''}, {'role': 'user', 'content': 'ку'}, {'role': 'user', 'content': 're'}, {'role': 'user', 'content': 're'}, {'role': 'user', 'content': 're'}, {'role': 'user', 'content': 'ох ты ж блять'}, {'role': 'user', 'content': 'ох ты ж блять'}], 'model': 'deepseek-ai/DeepSeek-R1-Distill-Llama-70B', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'send_telegram_message', 'description': "[CRITICAL] Sends a text message to the user in the current chat. Use this function for ALL textual communication directed at the user, including greetings, answers, confirmations, results, errors, and asking questions. Use sequential calls if you need to send multiple messages. Set 'requires_user_response' to true ONLY if you need the user to reply before you can proceed.", 'parameters': {'type': 'OBJECT', 'properties': {'text': {'type': 'STRING', 'description': 'The content of the message to send to the user. Must be plain text.'}, 'delay_seconds': {'type': 'INTEGER', 'description': '(Optional) Delay in seconds before sending the message. Useful for creating pauses or simulating thought.'}, 'requires_user_response': {'type': 'BOOLEAN', 'description': "(Optional) Set to 'true' ONLY if this message is a question or confirmation that requires an immediate user response before executing subsequent actions or function calls. Defaults to 'false' if omitted. For sequences of messages (like multiple questions or steps), set to 'false'."}}, 'required': ['text']}}}, {'type': 'function', 'function': {'name': 'find_user_id', 'description': "[ESSENTIAL] Searches the database for a user's unique ID (`user_id`) based on their first name or username (e.g., 'John Doe' or '@johndoe'). Returns the user_id if found. This is often necessary before using functions that require a specific user_id like `remember_user_info` or `reading_user_info` when targeting someone other than the current user.", 'parameters': {'type': 'OBJECT', 'properties': {'query': {'type': 'STRING', 'description': "The user's first name or username to search for. The '@' symbol is optional for usernames."}}, 'required': ['query']}}}, {'type': 'function', 'function': {'name': 'remember_user_info', 'description': "[MEMORY] Saves or updates a piece of information (a note or fact) about ANY user in the persistent database, identified by their `user_id`. If the current user's ID is provided, saves info about them. If another user's ID is provided, saves info about that user. Use this to store preferences, facts, reminders, etc.", 'parameters': {'type': 'OBJECT', 'properties': {'user_id': {'type': 'INTEGER', 'description': 'The unique ID of the user for whom the information is being saved.'}, 'info_category': {'type': 'STRING', 'description': "A category for the information (e.g., 'hobby', 'location', 'reminder', 'preferred_language'). Acts like a key."}, 'info_value': {'type': 'STRING', 'description': 'The actual information to store. Can be plain text or a JSON string for lists/dictionaries (e.g., \'"Loves hiking"\', \'["python", "javascript"]\', \'{"city": "London", "country": "UK"}\'). Ensure JSON strings are valid.'}, 'merge_lists': {'type': 'BOOLEAN', 'description': '(Optional) If True (default) and `info_value` is a JSON list/dictionary, attempts to merge with existing data in that category instead of overwriting. If False, overwrites.'}}, 'required': ['user_id', 'info_category', 'info_value']}}}, {'type': 'function', 'function': {'name': 'reading_user_info', 'description': '[MEMORY] Retrieves all known information (profile data + stored notes/facts from `remember_user_info`) about ANY user, identified by their `user_id`.', 'parameters': {'type': 'OBJECT', 'properties': {'user_id': {'type': 'INTEGER', 'description': 'The unique ID of the user whose information needs to be retrieved.'}}, 'required': ['user_id']}}}, {'type': 'function', 'function': {'name': 'forget_user_info', 'description': '[MEMORY] Deletes specific stored information (a note/fact) about ANY user from the database, identified by `user_id`. Can delete an entire category, a specific key within a JSON dictionary category, or a specific item within a JSON list category.', 'parameters': {'type': 'OBJECT', 'properties': {'user_id': {'type': 'INTEGER', 'description': 'The unique ID of the user whose information needs to be deleted.'}, 'info_category': {'type': 'STRING', 'description': 'The category of information to delete from.'}, 'key': {'type': 'STRING', 'description': '(Optional) If the `info_category` stores a JSON dictionary, specify the key to remove.'}, 'list_item': {'type': 'STRING', 'description': '(Optional) If the `info_category` stores a JSON list, specify the exact string value of the item to remove.'}}, 'required': ['user_id', 'info_category']}}}, {'type': 'function', 'function': {'name': 'Developer_Feedback', 'description': '[META] Use this function ONLY to report operational issues, suspected bugs, limitations, or suggestions directly to the bot developer/administrator. Specify the importance, a brief reason/category, and a detailed description. DO NOT use this for regular user interaction or responding to user queries.', 'parameters': {'type': 'OBJECT', 'properties': {'Degree_of_importance': {'type': 'STRING', 'description': "Severity or type of the feedback. Recommended values: 'critical', 'high', 'medium', 'low', 'suggestion'."}, 'Reason': {'type': 'STRING', 'description': "A brief category or reason for the feedback (e.g., 'Tool Error', 'Unexpected Behavior', 'API Limit Reached', 'Prompt Suggestion', 'Feature Request')."}, 'Problem': {'type': 'STRING', 'description': 'A detailed description of the issue, observation, or suggestion.'}}, 'required': ['Degree_of_importance', 'Reason', 'Problem']}}}, {'type': 'function', 'function': {'name': 'execute_terminal_command_in_env', 'description': "[POWERFUL ENV TOOL] Executes a raw shell command within the user's chat environment's terminal (working directory). Use cautiously for essential file system operations like listing files (`ls -la`), checking the current directory (`pwd`), reading small files (`cat filename.txt`), creating directories (`mkdir dirname`), checking disk usage (`df -h`), etc. Avoid potentially harmful or long-running commands (e.g., `rm -rf`, network scans, complex scripts) unless absolutely necessary and confirmed. Admins might have elevated permissions to operate in other chat directories. The command runs directly as provided.", 'parameters': {'type': 'OBJECT', 'properties': {'command': {'type': 'STRING', 'description': "The shell command to execute (e.g., 'ls -la work_files/', 'pwd', 'cat config.json')."}}, 'required': ['command']}}}, {'type': 'function', 'function': {'name': 'read_file_from_env', 'description': "[ENV TOOL] Reads the entire content of a specified file from the chat's environment storage and returns it as a string. Useful for accessing notes, data files, code, configuration, etc. Specify the full path if needed. Admins might be able to read files from other chat directories (e.g., using paths like '-100.../file.txt').", 'parameters': {'type': 'OBJECT', 'properties': {'filename': {'type': 'STRING', 'description': "Path to the file to read (e.g., 'my_notes.txt', 'data/input.csv', '../shared/config.yaml', '-100123456789/script.py')."}}, 'required': ['filename']}}}, {'type': 'function', 'function': {'name': 'write_file_to_env', 'description': "[ENV TOOL] Writes (or overwrites) the given text content to a specified file in the chat's environment storage. Useful for saving notes, results, generated code, configuration, etc. Ensure the content is appropriate for the file type. Admins might have permissions to write files in other chat directories.", 'parameters': {'type': 'OBJECT', 'properties': {'filename': {'type': 'STRING', 'description': "Path and name of the file to write to (e.g., 'results.txt', 'output/data.json', 'script.py')."}, 'content': {'type': 'STRING', 'description': 'The full text content to write into the file.'}}, 'required': ['filename', 'content']}}}, {'type': 'function', 'function': {'name': 'edit_file_content', 'description': '[ENV TOOL] Edits a text file within the chat environment by replacing ALL occurrences of a specific string with another string. Useful for simple bulk replacements in configuration files or text documents. Admins might have permissions to edit files in other chat directories.', 'parameters': {'type': 'OBJECT', 'properties': {'filename': {'type': 'STRING', 'description': 'Path to the file to edit.'}, 'search_string': {'type': 'STRING', 'description': 'The exact string to find within the file.'}, 'replace_string': {'type': 'STRING', 'description': 'The string to replace each occurrence of `search_string` with.'}}, 'required': ['filename', 'search_string', 'replace_string']}}}, {'type': 'function', 'function': {'name': 'edit_json_file', 'description': '[ENV TOOL] Edits a specific value within a JSON file in the chat environment using a JSONPath expression. Reads the JSON, modifies the value at the specified path, and overwrites the file. Admins might have permissions to edit files in other chat directories.', 'parameters': {'type': 'OBJECT', 'properties': {'filename': {'type': 'STRING', 'description': 'Path to the JSON file (.json) to edit.'}, 'json_path': {'type': 'STRING', 'description': 'JSONPath expression to locate the value to modify (e.g., \'$.user.name\', \'$.items[0].price\', \'$.config.settings.enabled\'). Use single quotes or escaped double quotes inside the path if needed for keys with special characters: \'$.user["first-name"]\'.'}, 'new_value_json': {'type': 'STRING', 'description': 'The new value to set, formatted as a valid JSON string (e.g., \'"New Name"\', \'123.45\', \'true\', \'["a", "b"]\', \'{"new_key": "new_value"}\'). String values inside JSON MUST use double quotes.'}}, 'required': ['filename', 'json_path', 'new_value_json']}}}, {'type': 'function', 'function': {'name': 'create_file_in_env', 'description': "[ENV TOOL] Creates a new, empty file at the specified path in the chat's environment storage. Useful for initializing log files, scripts, or data files before writing to them. Fails if the file already exists. Admins might have permissions to create files in other chat directories.", 'parameters': {'type': 'OBJECT', 'properties': {'filename': {'type': 'STRING', 'description': "Path and name for the new file to create (e.g., 'new_log.txt', 'scripts/init.py')."}}, 'required': ['filename']}}}, {'type': 'function', 'function': {'name': 'execute_python_script_in_env', 'description': "[ENV TOOL] Executes a Python script (.py file) located within the chat's environment storage. The script runs within the context of the environment. Use this to perform complex logic, data processing, or automation tasks defined in a Python file. Ensure the script exists and is safe to run. Admins might have permissions to execute scripts from other chat directories.", 'parameters': {'type': 'OBJECT', 'properties': {'filename': {'type': 'STRING', 'description': "Path to the Python script file (.py) to execute (e.g., 'process_data.py', 'utils/helper.py')."}}, 'required': ['filename']}}}, {'type': 'function', 'function': {'name': 'refine_text_with_deep_search', 'description': '[ADVANCED CONTENT] Use this tool for in-depth research on a topic or significantly improving existing text. It performs web searches to gather information, then uses multiple AI steps to generate clarifying questions, find answers, and synthesize a comprehensive final report or refined text. Suitable for complex queries or when high-quality, detailed output is required.', 'parameters': {'type': 'OBJECT', 'properties': {'initial_query_or_text': {'type': 'STRING', 'description': "The initial topic query (e.g., 'Explain quantum computing') or the existing text passage to be improved and expanded upon."}, 'max_iterations': {'type': 'INTEGER', 'description': '(Optional) Maximum number of research/refinement iterations (default is 3). More iterations lead to deeper research but take longer.'}}, 'required': ['initial_query_or_text']}}}, {'type': 'function', 'function': {'name': 'get_current_weather', 'description': '[EXTERNAL DATA] Fetches the current weather conditions for a specified location.', 'parameters': {'type': 'OBJECT', 'properties': {'location': {'type': 'STRING', 'description': "The city or location name (e.g., 'Moscow', 'London, UK', 'San Francisco, CA'). Be specific for better accuracy."}, 'unit': {'type': 'STRING', 'description': "Temperature unit: 'celsius' or 'fahrenheit'. Defaults to 'celsius'."}}, 'required': ['location']}}}, {'type': 'function', 'function': {'name': 'get_stock_price', 'description': '[EXTERNAL DATA] Retrieves the current price for a publicly traded stock using its ticker symbol.', 'parameters': {'type': 'OBJECT', 'properties': {'ticker_symbol': {'type': 'STRING', 'description': "The stock's ticker symbol (e.g., 'GOOGL', 'AAPL', 'MSFT', 'YNDX.ME'). Ensure the correct symbol for the market."}}, 'required': ['ticker_symbol']}}}, {'type': 'function', 'function': {'name': 'get_music_charts', 'description': '[EXTERNAL DATA] Fetches top music tracks from a specified chart source (e.g., Yandex.Music).', 'parameters': {'type': 'OBJECT', 'properties': {'source': {'type': 'STRING', 'description': "The source of the music chart (e.g., 'yandex'). Check available sources."}, 'limit': {'type': 'INTEGER', 'description': 'Maximum number of tracks to return (default 10).'}}, 'required': ['source']}}}, {'type': 'function', 'function': {'name': 'send_file_from_env', 'description': "[ENV TOOL] Sends a specified file from the chat's environment storage directly to the user in the current chat. Use this to provide requested files, logs, script outputs, etc. Admins might be able to send files from other chat directories.", 'parameters': {'type': 'OBJECT', 'properties': {'filename': {'type': 'STRING', 'description': "Path to the file within the environment storage to send (e.g., 'results.txt', 'logs/debug.log', '../shared_data/report.pdf')."}}, 'required': ['filename']}}}, {'type': 'function', 'function': {'name': 'get_avatar_description', 'description': "[USER INFO] Retrieves a textual description of a user's avatar (profile picture). It first checks if a description was previously generated and saved. If not, it may trigger a request to generate a new description using a vision model (if available and feasible).", 'parameters': {'type': 'OBJECT', 'properties': {'user_id': {'type': 'INTEGER', 'description': 'The unique ID of the user whose avatar description is needed.'}}, 'required': ['user_id']}}}, {'type': 'function', 'function': {'name': 'generate_image_description', 'description': '[VISION TOOL] Generates a textual description for a given image. This tool is primarily used internally by other functions like `get_avatar_description` when a description needs to be created on-demand. It requires the image data itself.', 'parameters': {'type': 'OBJECT', 'properties': {'image_bytes': {'type': 'STRING', 'description': 'The image encoded as a Base64 string. Do not call this directly unless you have the image bytes.'}, 'prompt': {'type': 'STRING', 'description': "(Optional) A specific prompt or context to guide the description generation (e.g., 'Focus on the main subject', 'Describe the style')."}}, 'required': ['image_bytes']}}}]}}
2025-05-05 20:01:52 - DEBUG - openai._base_client - Sending HTTP Request: POST https://api.intelligence.io.solutions/api/v1/chat/completions
2025-05-05 20:01:52 - DEBUG - httpcore.connection - close.started
2025-05-05 20:01:52 - DEBUG - httpcore.connection - close.complete
2025-05-05 20:01:52 - DEBUG - httpcore.connection - connect_tcp.started host='api.intelligence.io.solutions' port=443 local_address=None timeout=5.0 socket_options=None
2025-05-05 20:01:52 - DEBUG - httpcore.connection - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x0000029A50E0CF50>
2025-05-05 20:01:52 - DEBUG - httpcore.connection - start_tls.started ssl_context=<ssl.SSLContext object at 0x0000029A50D2D7F0> server_hostname='api.intelligence.io.solutions' timeout=5.0
2025-05-05 20:01:52 - DEBUG - httpcore.connection - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x0000029A50DB0D60>
2025-05-05 20:01:52 - DEBUG - httpcore.http11 - send_request_headers.started request=<Request [b'POST']>
2025-05-05 20:01:52 - DEBUG - httpcore.http11 - send_request_headers.complete
2025-05-05 20:01:52 - DEBUG - httpcore.http11 - send_request_body.started request=<Request [b'POST']>
2025-05-05 20:01:52 - DEBUG - httpcore.http11 - send_request_body.complete
2025-05-05 20:01:52 - DEBUG - httpcore.http11 - receive_response_headers.started request=<Request [b'POST']>
2025-05-05 20:02:03 - DEBUG - httpcore.http11 - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 05 May 2025 13:01:58 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'cf-cache-status', b'DYNAMIC'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93b06db35b25d90e-HEL'), (b'Content-Encoding', b'gzip')])
2025-05-05 20:02:03 - INFO - httpx - HTTP Request: POST https://api.intelligence.io.solutions/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-05 20:02:03 - DEBUG - httpcore.http11 - receive_response_body.started request=<Request [b'POST']>
2025-05-05 20:02:03 - DEBUG - httpcore.http11 - receive_response_body.complete
2025-05-05 20:02:03 - DEBUG - httpcore.http11 - response_closed.started
2025-05-05 20:02:03 - DEBUG - httpcore.http11 - response_closed.complete
2025-05-05 20:02:03 - DEBUG - openai._base_client - HTTP Response: POST https://api.intelligence.io.solutions/api/v1/chat/completions "200 OK" Headers({'date': 'Mon, 05 May 2025 13:01:58 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'cf-ray': '93b06db35b25d90e-HEL', 'content-encoding': 'gzip'})
2025-05-05 20:02:03 - DEBUG - openai._base_client - request_id: None
2025-05-05 20:02:03 - DEBUG - ai_interface.openai_api - OpenAI API call successful. Finish reason: stop
2025-05-05 20:02:03 - INFO - ai_interface.tool_processing - --- Starting OpenAI Tool Processing Cycle (Chat: 905302972) ---
2025-05-05 20:02:03 - INFO - ai_interface.tool_processing - --- OpenAI Tool Step 1/10 (Chat: 905302972) ---
2025-05-05 20:02:03 - INFO - ai_interface.tool_processing - OpenAI finish reason is 'stop'. Ending tool cycle.
2025-05-05 20:02:03 - INFO - ai_interface.tool_processing - OpenAI Tool processing cycle finished after 1 step(s).
2025-05-05 20:02:03 - INFO - core_agent.ai_interaction - AI Interaction (OPENAI) completed successfully. Chat: 905302972. Final history length: 9
2025-05-05 20:02:03 - INFO - core_agent.agent_processor - Core Agent (OPENAI): Final text generated chat 905302972.
2025-05-05 20:02:03 - INFO - core_agent.history_manager - Save History (OPENAI): Preparing to save 3 new entries for chat 905302972.
2025-05-05 20:02:03 - DEBUG - database.connection - Reusing existing DB connection. Connection object ID: 2861802783136
2025-05-05 20:02:03 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            INSERT INTO chat_history (chat_id, role, user_id, parts_json)\n            VALUES (?, ?, ?, ?)\n            ', (905302972, 'user', 905302972, '[{"type": "text", "content": "ох ты ж блять"}]'))
2025-05-05 20:02:03 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            INSERT INTO chat_history (chat_id, role, user_id, parts_json)\n            VALUES (?, ?, ?, ?)\n            ', (905302972, 'user', 905302972, '[{"type": "text", "content": "ох ты ж блять"}]')) completed
2025-05-05 20:02:03 - DEBUG - database.crud_ops.history - Executed INSERT for chat=905302972, role=user. Preparing to commit...
2025-05-05 20:02:03 - DEBUG - aiosqlite - executing functools.partial(<built-in method commit of sqlite3.Connection object at 0x0000029A50BDC130>)
2025-05-05 20:02:03 - DEBUG - aiosqlite - operation functools.partial(<built-in method commit of sqlite3.Connection object at 0x0000029A50BDC130>) completed
2025-05-05 20:02:03 - INFO - database.crud_ops.history - Successfully committed history entry: chat=905302972, role=user, user=905302972, json_size=46
2025-05-05 20:02:03 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT id, timestamp FROM chat_history WHERE chat_id = ? AND role = ? ORDER BY id DESC LIMIT 1', (905302972, 'user'))
2025-05-05 20:02:03 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT id, timestamp FROM chat_history WHERE chat_id = ? AND role = ? ORDER BY id DESC LIMIT 1', (905302972, 'user')) completed
2025-05-05 20:02:03 - DEBUG - aiosqlite - executing functools.partial(<built-in method fetchone of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:02:03 - DEBUG - aiosqlite - operation functools.partial(<built-in method fetchone of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:02:03 - INFO - database.crud_ops.history - VERIFY AFTER COMMIT: Found history for 905302972/user, id: 8, ts: 2025-05-05 13:02:03
2025-05-05 20:02:03 - DEBUG - aiosqlite - executing functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:02:03 - DEBUG - aiosqlite - operation functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:02:03 - DEBUG - database.connection - Reusing existing DB connection. Connection object ID: 2861802783136
2025-05-05 20:02:03 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            INSERT INTO chat_history (chat_id, role, user_id, parts_json)\n            VALUES (?, ?, ?, ?)\n            ', (905302972, 'user', 905302972, '[{"type": "text", "content": "ох ты ж блять"}]'))
2025-05-05 20:02:03 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, '\n            INSERT INTO chat_history (chat_id, role, user_id, parts_json)\n            VALUES (?, ?, ?, ?)\n            ', (905302972, 'user', 905302972, '[{"type": "text", "content": "ох ты ж блять"}]')) completed
2025-05-05 20:02:03 - DEBUG - database.crud_ops.history - Executed INSERT for chat=905302972, role=user. Preparing to commit...
2025-05-05 20:02:03 - DEBUG - aiosqlite - executing functools.partial(<built-in method commit of sqlite3.Connection object at 0x0000029A50BDC130>)
2025-05-05 20:02:03 - DEBUG - aiosqlite - operation functools.partial(<built-in method commit of sqlite3.Connection object at 0x0000029A50BDC130>) completed
2025-05-05 20:02:03 - INFO - database.crud_ops.history - Successfully committed history entry: chat=905302972, role=user, user=905302972, json_size=46
2025-05-05 20:02:03 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT id, timestamp FROM chat_history WHERE chat_id = ? AND role = ? ORDER BY id DESC LIMIT 1', (905302972, 'user'))
2025-05-05 20:02:03 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'SELECT id, timestamp FROM chat_history WHERE chat_id = ? AND role = ? ORDER BY id DESC LIMIT 1', (905302972, 'user')) completed
2025-05-05 20:02:03 - DEBUG - aiosqlite - executing functools.partial(<built-in method fetchone of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:02:03 - DEBUG - aiosqlite - operation functools.partial(<built-in method fetchone of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:02:03 - INFO - database.crud_ops.history - VERIFY AFTER COMMIT: Found history for 905302972/user, id: 9, ts: 2025-05-05 13:02:03
2025-05-05 20:02:03 - DEBUG - aiosqlite - executing functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>)
2025-05-05 20:02:03 - DEBUG - aiosqlite - operation functools.partial(<built-in method close of sqlite3.Cursor object at 0x0000029A50BBFCC0>) completed
2025-05-05 20:02:03 - ERROR - database.crud_ops.history - Invalid role 'assistant' provided for chat history (chat_id: 905302972).
2025-05-05 20:02:03 - INFO - core_agent.history_manager - Save History (OPENAI): Finished saving. Saved 3/3 new entries for chat 905302972.
2025-05-05 20:02:03 - DEBUG - telegram_interface.handlers.common_messages - handle_user_request returned: Text
2025-05-05 20:02:03 - INFO - telegram_interface.handlers.common_messages - Sending final response (len=1119) to chat 905302972
2025-05-05 20:02:03 - INFO - aiogram.event - Update id=49939278 is handled. Duration 11559 ms by bot id=7205919623
2025-05-05 20:02:19 - INFO - aiogram.dispatcher - Polling stopped
2025-05-05 20:02:19 - INFO - bot_lifecycle - Executing bot shutdown sequence...
2025-05-05 20:02:19 - INFO - services.news_service - Stopping NewsService...
2025-05-05 20:02:19 - INFO - services.news_service - News scheduler task stopped.
2025-05-05 20:02:19 - INFO - services.news_service - GUID cleanup task stopped.
2025-05-05 20:02:19 - INFO - bot_lifecycle - News service stopped successfully.
2025-05-05 20:02:19 - DEBUG - database.connection - Attempting WAL checkpoint before closing connection...
2025-05-05 20:02:19 - DEBUG - aiosqlite - executing functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'PRAGMA wal_checkpoint(TRUNCATE);', [])
2025-05-05 20:02:19 - DEBUG - aiosqlite - operation functools.partial(<built-in method execute of sqlite3.Connection object at 0x0000029A50BDC130>, 'PRAGMA wal_checkpoint(TRUNCATE);', []) completed
2025-05-05 20:02:19 - INFO - database.connection - WAL checkpoint successful before closing.
2025-05-05 20:02:19 - DEBUG - aiosqlite - executing functools.partial(<built-in method close of sqlite3.Connection object at 0x0000029A50BDC130>)
2025-05-05 20:02:19 - DEBUG - aiosqlite - operation functools.partial(<built-in method close of sqlite3.Connection object at 0x0000029A50BDC130>) completed
2025-05-05 20:02:19 - INFO - database.connection - Database connection closed.
2025-05-05 20:02:19 - INFO - bot_lifecycle - Database connection closed.
2025-05-05 20:02:19 - INFO - bot_lifecycle - Dispatcher workflow_data cleared.
2025-05-05 20:02:19 - INFO - bot_lifecycle - Bot session closed.
2025-05-05 20:02:19 - INFO - bot_lifecycle - Bot shutdown sequence complete.
2025-05-05 20:02:19 - INFO - __main__ - Polling stopped. Initiating shutdown sequence (inner finally)...
2025-05-05 20:02:19 - INFO - __main__ - Inner shutdown sequence presumably completed via on_shutdown handler.
2025-05-05 20:02:19 - INFO - __main__ - --- Entering main() finally block --- 
2025-05-05 20:02:19 - INFO - __main__ - --- Bot Lifecycle in main() finished. DB connection closed. ---
2025-05-05 20:02:19 - INFO - aiogram.dispatcher - Polling stopped for bot @beykusay_bot id=7205919623 - 'BeykusAgent'
2025-05-05 20:02:19 - INFO - __main__ - Bot stopped by user (KeyboardInterrupt/SystemExit) at top level.
2025-05-05 20:02:19 - INFO - __main__ - Bot application finished.
