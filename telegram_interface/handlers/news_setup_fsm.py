# telegram_interface/handlers/news_setup_fsm.py

import logging
import re
import json
from typing import List, Set, Optional

from aiogram import Router, F, types, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message, ChatMemberAdministrator, ChatMemberOwner
from aiogram.exceptions import TelegramAPIError

# --- –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã ---
try:
    # –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
    from ..states.news_setup import NewsSetupStates
    # –î–æ—Å—Ç—É–ø –∫ –ë–î
    import database
    # –î–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º (–¥–ª—è RSS_MAPPING)
    from config import settings
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    from utils.helpers import escape_markdown_v2
except ImportError:
    logging.critical("CRITICAL: Failed to import dependencies in news_setup_fsm!", exc_info=True)
    # –ó–∞–≥–ª—É—à–∫–∏
    class NewsSetupStates: waiting_channel, waiting_topics, waiting_schedule = "s1", "s2", "s3" # type: ignore
    database = None # type: ignore
    settings = type('obj', (object,), {'rss_mapping': {'—Ç–µ—Å—Ç': ['url']}})() # type: ignore
    def escape_markdown_v2(text: str) -> str: return text

logger = logging.getLogger(__name__)
router = Router(name="news_setup_fsm_router")

# --- –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã ---
cancel_button = InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="news_setup:cancel")
cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[[cancel_button]])

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /news_setup ---
@router.message(Command("news_setup"), StateFilter(default_state))
async def cmd_news_setup_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–Ω–æ–≤–æ—Å—Ç–µ–π."""
    user_id = message.from_user.id if message.from_user else 0
    logger.info(f"User {user_id} initiated news setup.")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º MarkdownV2 –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await message.answer(
            "üì∞ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ê–≤—Ç–æ–Ω–æ–≤–æ—Å—Ç–µ–π*\n\n"
            "–ß—Ç–æ–±—ã —è –º–æ–≥ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ, –º–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é *–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π*\\.\n\n"
            "*–®–∞–≥ 1/3:* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, **–ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞** —Å—é–¥–∞\\. "
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ **username** \\(–Ω–∞–ø—Ä–∏–º–µ—Ä, `@mychannel`\\) –∏–ª–∏ **ID** \\(–Ω–∞–ø—Ä–∏–º–µ—Ä, `-100123456789`\\)\\.\n\n"
            "_–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞\\!_",
            reply_markup=cancel_keyboard # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        )
        await state.set_state(NewsSetupStates.waiting_channel)
    except Exception as e:
        logger.error(f"Error starting news setup for user {user_id}: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –Ω–∞ –ª—é–±–æ–º —à–∞–≥–µ ---
@router.callback_query(F.data == "news_setup:cancel", StateFilter(NewsSetupStates))
async def cancel_handler_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã."""
    current_state = await state.get_state()
    if current_state is None: return # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —Å–±—Ä–æ—à–µ–Ω–æ

    user_id = callback.from_user.id
    logger.info(f"User {user_id} cancelled news setup from state {current_state}.")
    await state.clear()
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à–µ–ª –∫–æ–ª–±–µ–∫
        await callback.message.edit_text("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç–º–µ–Ω–µ–Ω–∞\\.")
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç–º–µ–Ω–µ–Ω–∞\\.")
    await callback.answer() # –£–±–∏—Ä–∞–µ–º —á–∞—Å–∏–∫–∏

@router.message(Command("cancel"), StateFilter(NewsSetupStates))
async def cancel_handler_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel –≤–æ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    current_state = await state.get_state()
    if current_state is None: return

    user_id = message.from_user.id if message.from_user else 0
    logger.info(f"User {user_id} cancelled news setup via command from state {current_state}.")
    await state.clear()
    await message.reply("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç–º–µ–Ω–µ–Ω–∞\\.")


# --- –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞ ---
@router.message(StateFilter(NewsSetupStates.waiting_channel), F.forward_from_chat | F.text)
async def process_channel_input(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞."""
    user_id = message.from_user.id if message.from_user else 0
    channel_id: Optional[int] = None
    channel_title: Optional[str] = None
    error_msg: Optional[str] = None
    target_chat: Optional[types.Chat] = None

    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.forward_from_chat and message.forward_from_chat.type == 'channel':
        target_chat = message.forward_from_chat
        logger.debug(f"Received forwarded message from channel ID: {target_chat.id}")
    # –í–∞—Ä–∏–∞–Ω—Ç 2: –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ (username –∏–ª–∏ ID)
    elif message.text:
        text_input = message.text.strip()
        try:
            target_chat = await bot.get_chat(text_input)
            if target_chat.type != 'channel':
                error_msg = f"‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (`{escape_markdown_v2(text_input)}`) –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —á–∞—Ç—É —Ç–∏–ø–∞ `{target_chat.type}`, –∞ –Ω–µ –∫–∞–Ω–∞–ª—É\\."
                target_chat = None
            else:
                logger.debug(f"Resolved channel from input '{text_input}' to ID: {target_chat.id}")
        except TelegramAPIError as e:
            logger.warning(f"Failed to get chat by input '{text_input}': {e}")
            error_msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –ø–æ '{escape_markdown_v2(text_input)}'\\. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ username/ID —É–∫–∞–∑–∞–Ω –≤–µ—Ä–Ω–æ, –∏ –±–æ—Ç –∏–º–µ–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø\\."
        except Exception as e:
            logger.error(f"Unexpected error getting chat '{text_input}': {e}", exc_info=True)
            error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞\\."
    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ username/ID\\.", reply_markup=cancel_keyboard)
        return

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–Ω–∞–ª
    if target_chat is None:
        await message.reply(error_msg or "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–Ω–∞–ª\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\.", reply_markup=cancel_keyboard)
        return

    channel_id = target_chat.id
    channel_title = target_chat.title or f"–ö–∞–Ω–∞–ª {channel_id}"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ
    try:
        me = await bot.get_me()
        bot_member = await bot.get_chat_member(channel_id, me.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–æ–º —Å –ø—Ä–∞–≤–æ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if not isinstance(bot_member, (ChatMemberAdministrator, ChatMemberOwner)) or \
           (isinstance(bot_member, ChatMemberAdministrator) and not bot_member.can_post_messages):
             error_msg = f"–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ '{escape_markdown_v2(channel_title)}' –∏–ª–∏ **–Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è**\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–∞–Ω–∞–ª–∞\\."

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º/–≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–∞–Ω–∞–ª–∞
        if user_id != 0 and not error_msg: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–∫–∏ —Å –±–æ—Ç–æ–º
             user_member = await bot.get_chat_member(channel_id, user_id)
             if user_member.status not in ["administrator", "creator"]:
                  error_msg = "–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–ª—è –Ω–µ–≥–æ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π\\."

    except TelegramAPIError as e:
         logger.error(f"API error checking permissions channel={channel_id}: {e}")
         error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –≤ –∫–∞–Ω–∞–ª–µ '{escape_markdown_v2(channel_title)}' \\(ID: `{channel_id}`\\)\\. –í–æ–∑–º–æ–∂–Ω–æ, —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\\. –û—à–∏–±–∫–∞ API: {escape_markdown_v2(str(e))}"
    except Exception as e:
         logger.error(f"Unexpected error checking permissions channel={channel_id}: {e}", exc_info=True)
         error_msg = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –≤ –∫–∞–Ω–∞–ª–µ\\."

    # –ï—Å–ª–∏ –±—ã–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤
    if error_msg:
        await message.reply(error_msg, reply_markup=cancel_keyboard)
        return

    # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
    logger.info(f"Channel '{channel_title}' (ID: {channel_id}) verified for user {user_id}. Bot has posting rights.")
    await state.update_data(channel_id=channel_id, channel_title=channel_title)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    available_topics = list(settings.rss_mapping.keys())
    if not available_topics:
         logger.error("Configuration error: No available RSS topics found in settings.rss_mapping.")
         await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã –Ω–æ–≤–æ—Å—Ç–µ–π\\. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞\\.")
         await state.clear()
         return

    topics_text = "\n".join([f"‚Ä¢ `{topic}`" for topic in available_topics]) # –ò—Å–ø–æ–ª—å–∑—É–µ–º code –¥–ª—è —Ç–µ–º

    await message.answer(
        f"‚úÖ –ö–∞–Ω–∞–ª *{escape_markdown_v2(channel_title)}* \\(ID: `{channel_id}`\\) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\\.\n\n"
        "*–®–∞–≥ 2/3:* –í—ã–±–µ—Ä–∏—Ç–µ **—Ç–µ–º—ã –Ω–æ–≤–æ—Å—Ç–µ–π**, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å\\. "
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\\.\n\n"
        f"*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:*\n{topics_text}",
        reply_markup=cancel_keyboard
    )
    await state.set_state(NewsSetupStates.waiting_topics)


# --- –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º –Ω–æ–≤–æ—Å—Ç–µ–π ---
@router.message(StateFilter(NewsSetupStates.waiting_topics), F.text)
async def process_topics_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–º –Ω–æ–≤–æ—Å—Ç–µ–π."""
    user_id = message.from_user.id if message.from_user else 0
    user_input_topics = [t.strip().lower() for t in message.text.split(',') if t.strip()]
    valid_topics: Set[str] = set()
    invalid_topics: List[str] = []

    available_topics_map = settings.rss_mapping # –ö–∞—Ä—Ç–∞ —Ç–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞

    for topic in user_input_topics:
        if topic in available_topics_map:
            valid_topics.add(topic)
        else:
            invalid_topics.append(topic)

    if invalid_topics:
        escaped_invalid = ", ".join(f"`{escape_markdown_v2(t)}`" for t in invalid_topics)
        escaped_available = ", ".join(f"`{escape_markdown_v2(t)}`" for t in available_topics_map.keys())
        await message.reply(
            f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ–º—ã: {escaped_invalid}\\.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {escaped_available}",
            reply_markup=cancel_keyboard
        )
        return # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ

    if not valid_topics:
        await message.reply("‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ç–µ–º—ã\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É\\.", reply_markup=cancel_keyboard)
        return

    logger.info(f"User {user_id} selected valid topics: {valid_topics}")
    await state.update_data(selected_topics=list(valid_topics)) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –µ–∂–µ—á–∞—Å–Ω–æ–≥–æ –ø–æ—Å—Ç–∏–Ω–≥–∞
    hourly_button = InlineKeyboardButton(text="‚è∞ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å", callback_data="news_schedule:hourly")
    schedule_keyboard = InlineKeyboardMarkup(inline_keyboard=[[hourly_button], [cancel_button]])

    await message.answer(
        "‚úÖ –¢–µ–º—ã –≤—ã–±—Ä–∞–Ω—ã\\.\n\n"
        "*–®–∞–≥ 3/3:* –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ **–≤—Ä–µ–º—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π** –Ω–æ–≤–æ—Å—Ç–µ–π\\. "
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ß–ß:–ú–ú` —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é \\(–Ω–∞–ø—Ä–∏–º–µ—Ä, `09:00, 15:30, 21:00`\\)\\. –í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤ UTC\\.\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ **–∫–∞–∂–¥—ã–π —á–∞—Å**\\.",
        reply_markup=schedule_keyboard
    )
    await state.set_state(NewsSetupStates.waiting_schedule)


# --- –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---
@router.message(StateFilter(NewsSetupStates.waiting_schedule), F.text)
async def process_schedule_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    user_id = message.from_user.id if message.from_user else 0
    time_input = message.text
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ß–ß:–ú–ú
    time_pattern = re.compile(r'^([01]?[0-9]|2[0-3]):([0-5][0-9])$')
    schedule_times: Set[str] = set()
    invalid_times: List[str] = []

    raw_times = [t.strip() for t in time_input.split(',') if t.strip()]

    if not raw_times:
         await message.reply("‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≤—Ä–µ–º—è\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ß–ß:–ú–ú` —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\\.", reply_markup=cancel_keyboard)
         return

    for time_str in raw_times:
        if time_pattern.match(time_str):
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –∫ HH:MM
            hour, minute = map(int, time_str.split(':'))
            normalized_time = f"{hour:02d}:{minute:02d}"
            schedule_times.add(normalized_time)
        else:
            invalid_times.append(time_str)

    if invalid_times:
        escaped_invalid = ", ".join(f"`{escape_markdown_v2(t)}`" for t in invalid_times)
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ö–∞–∂–¥—ã–π —á–∞—Å"
        hourly_button = InlineKeyboardButton(text="‚è∞ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å", callback_data="news_schedule:hourly")
        schedule_keyboard = InlineKeyboardMarkup(inline_keyboard=[[hourly_button], [cancel_button]])
        await message.reply(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {escaped_invalid}\\.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç `–ß–ß:–ú–ú` \\(–Ω–∞–ø—Ä–∏–º–µ—Ä, `08:00`, `19:35`\\) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\\.",
            reply_markup=schedule_keyboard
        )
        return

    if not schedule_times:
        await message.reply("‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\\.", reply_markup=cancel_keyboard)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    await _save_subscription_and_finish(state, list(sorted(schedule_times)), message)

@router.callback_query(F.data == "news_schedule:hourly", StateFilter(NewsSetupStates.waiting_schedule))
async def process_schedule_hourly_button(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å'."""
    user_id = callback.from_user.id
    logger.info(f"User {user_id} chose hourly schedule.")
    hourly_schedule = [f"{h:02d}:00" for h in range(24)]
    await callback.answer("–í—ã–±—Ä–∞–Ω–∞ –µ–∂–µ—á–∞—Å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è.")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    await _save_subscription_and_finish(state, hourly_schedule, callback.message)
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –≥–¥–µ –Ω–∞–∂–∞–ª–∏
    try:
         await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
         logger.warning(f"Could not edit reply markup after hourly schedule selection: {e}")


async def _save_subscription_and_finish(state: FSMContext, schedule: List[str], message_or_callback_message: Message):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è FSM."""
    user_id = message_or_callback_message.from_user.id if message_or_callback_message.from_user else 0
    if database is None:
        await message_or_callback_message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        await state.clear()
        return
    try:
        data = await state.get_data()
        channel_id = data.get('channel_id')
        channel_title = data.get('channel_title', 'N/A')
        selected_topics = data.get('selected_topics')

        if not channel_id or not selected_topics:
            logger.error(f"Missing channel_id or topics in FSM state for user {user_id}.")
            await message_or_callback_message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /news_setup")
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        success = await database.add_or_update_subscription(
            channel_id=channel_id,
            topics=selected_topics,
            schedule=schedule
        )

        if success:
            topics_str = ", ".join(f"`{t}`" for t in selected_topics)
            schedule_str = "–ö–∞–∂–¥—ã–π —á–∞—Å \\(UTC\\)" if len(schedule) == 24 else ", ".join(f"`{t}`" for t in schedule) + " \\(UTC\\)"
            response_text = (
                f"‚úÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {escape_markdown_v2(channel_title)} \\(ID: `{channel_id}`\\)!*\n\n"
                f"‚Ä¢ *–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã:* {topics_str}\n"
                f"‚Ä¢ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:* {schedule_str}"
            )
            logger.info(f"News subscription saved channel={channel_id}, user={user_id}. Topics: {selected_topics}, Schedule: {schedule_str}")
            await message_or_callback_message.answer(response_text)
        else:
            logger.error(f"Failed to save subscription to DB channel={channel_id}, user={user_id}.")
            await message_or_callback_message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.")

    except Exception as e:
        logger.error(f"Error saving subscription user={user_id}: {e}", exc_info=True)
        await message_or_callback_message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫\\.")
    finally:
        await state.clear() # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM