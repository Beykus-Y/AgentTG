# telegram_interface/handlers/error_handler.py
import logging
import html
import traceback

from aiogram import Router, types
from aiogram.exceptions import TelegramAPIError # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
from aiogram.utils.markdown import hcode, bold, italic # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
from aiogram.enums import ParseMode # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ParseMode

# --- –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã ---
try:
    from utils.helpers import escape_markdown_v2
    from config import settings
except ImportError:
    # ... (–∑–∞–≥–ª—É—à–∫–∏)
    pass # –û—Å—Ç–∞–≤–ª—è–µ–º pass, —Ç.–∫. –∑–∞–≥–ª—É—à–∫–∏ —É–∂–µ –µ—Å—Ç—å

logger = logging.getLogger(__name__)
router = Router(name="error_handler_router")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---
@router.errors()
async def handle_errors(update: types.ErrorEvent):
    """
    –õ–æ–≤–∏—Ç –≤—Å–µ –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
    –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    """
    exception = update.exception
    exception_name = type(exception).__name__
    update_json = update.update.model_dump_json(indent=2, exclude_none=True)

    # --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
    tb_list = traceback.format_exception(None, exception, exception.__traceback__)
    tb_string = "".join(tb_list)
    logger.error(
        f"!!! Caught exception: {exception_name}\n"
        f"    Update: {update_json}\n"
        f"    Exception: {exception}\n"
        f"    Traceback:\n{tb_string}"
    )

    # --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ ---
    if settings and settings.admin_ids:
        # –°–æ–±–∏—Ä–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        chat_info_raw = "N/A"
        user_info_raw = "N/A"
        message_text_raw = "N/A"
        event = update.update
        if event.message:
            chat_info_raw = f"Chat: {event.message.chat.id} ({event.message.chat.type})"
            if event.message.from_user: user_info_raw = f"User: {event.message.from_user.id} (@{event.message.from_user.username})"
            if event.message.text: message_text_raw = event.message.text[:100]
        elif event.callback_query:
            if event.callback_query.message: chat_info_raw = f"Chat: {event.callback_query.message.chat.id} ({event.callback_query.message.chat.type})"
            if event.callback_query.from_user: user_info_raw = f"User: {event.callback_query.from_user.id} (@{event.callback_query.from_user.username})"
            message_text_raw = f"CallbackData: {event.callback_query.data}"

        # <<< –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—â–∞—Ç–µ–ª—å–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º >>>
        admin_message_parts = [
            bold("üö® Bot Error:"), # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ–ª–ø–µ—Ä—ã aiogram
            hcode(exception_name),
            bold("Exception:"),
            hcode(escape_markdown_v2(str(exception))), # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            bold("Context:"),
            italic(escape_markdown_v2(chat_info_raw) + ", " + escape_markdown_v2(user_info_raw)), # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            bold("Trigger:"),
            hcode(escape_markdown_v2(message_text_raw)), # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è/–¥–∞–Ω–Ω—ã—Ö
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–π—Å–±–µ–∫
        short_traceback = "\n".join(traceback.format_exception(None, exception, exception.__traceback__, limit=5))
        admin_message_parts.extend([
            bold("Traceback (short):"),
            # hcode() —Å–∞–º –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤–Ω—É—Ç—Ä–∏ –∫–æ–¥–∞, –Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            hcode(escape_markdown_v2(short_traceback))
        ])

        full_admin_message = "\n".join(admin_message_parts)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        MAX_LEN = 4096
        if len(full_admin_message) > MAX_LEN:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–µ–∑–∞—Ç—å —Ç—Ä–µ–π—Å–±–µ–∫
            base_len = len("\n".join(admin_message_parts[:-2])) # –î–ª–∏–Ω–∞ –±–µ–∑ —Ç—Ä–µ–π—Å–±–µ–∫–∞
            available_space = MAX_LEN - base_len - 40
            if available_space > 100:
                 short_traceback_limited = short_traceback[:available_space]
                 # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
                 admin_message_parts = admin_message_parts[:-2] + [
                     bold("Traceback (truncated):"),
                     hcode(escape_markdown_v2(short_traceback_limited))
                 ]
                 full_admin_message = "\n".join(admin_message_parts)
            else: # –û–±—Ä–µ–∑–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                 full_admin_message = full_admin_message[:MAX_LEN - 20] + "\n... (message truncated)"
            logger.warning("Admin error notification message truncated.")


        from bot_loader import bot
        if bot:
             for admin_id in settings.admin_ids:
                 try:
                     # <<< –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å MarkdownV2 >>>
                     await bot.send_message(
                         chat_id=admin_id,
                         text=full_admin_message,
                         parse_mode=ParseMode.MARKDOWN_V2 # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
                     )
                 except TelegramAPIError as notify_err_md:
                     logger.error(f"Failed notify admin {admin_id} with MarkdownV2: {notify_err_md}")
                     # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
                     try:
                          await bot.send_message(chat_id=admin_id, text=full_admin_message, parse_mode=None)
                     except Exception as notify_err_plain:
                          logger.error(f"Failed notify admin {admin_id} even without parse mode: {notify_err_plain}")
                 except Exception as notify_err: # –õ–æ–≤–∏–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
                     logger.error(f"Unexpected error notifying admin {admin_id}: {notify_err}")
        else:
            logger.error("Cannot notify admins: Bot instance is unavailable.")

    return True # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞