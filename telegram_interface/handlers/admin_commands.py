# telegram_interface/handlers/admin_commands.py

import logging
from typing import Optional

from aiogram import Router, types, Bot
from aiogram.filters import Command, CommandObject
from aiogram.enums import ChatType
from aiogram.exceptions import TelegramAPIError

# --- –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã ---
try:
    # –§–∏–ª—å—Ç—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    from ..filters.admin import IsAdminFilter
    # –ú–æ–¥—É–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    import database
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
    from utils.helpers import escape_markdown_v2, is_admin as check_if_admin
    # –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    from bot_loader import bot as current_bot # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º bot
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è –ª–∏–º–∏—Ç–∞ –≤–∞—Ä–Ω–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä)
    from config import settings
    # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —á–∞—Ä—Ç–æ–≤
    from tools.basic_tools import get_music_charts
except ImportError:
    logging.critical("CRITICAL: Failed to import dependencies in admin_commands!", exc_info=True)
    # –ó–∞–≥–ª—É—à–∫–∏
    IsAdminFilter = type('Filter', (object,), {'__call__': lambda self, u: True}) # type: ignore
    database = None # type: ignore
    def escape_markdown_v2(text: str) -> str: return text
    def check_if_admin(uid: Optional[int]) -> bool: return False
    current_bot = None # type: ignore
    settings = type('obj', (object,), {'warn_limit': 5})() # type: ignore
    async def get_music_charts(*args, **kwargs): return {"status": "error", "message": "Tool unavailable"}

logger = logging.getLogger(__name__)
router = Router(name="admin_commands_router")

# !!! –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä IsAdminFilter –∫–æ –≤—Å–µ–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º –≤ —ç—Ç–æ–º —Ä–æ—É—Ç–µ—Ä–µ !!!
router.message.filter(IsAdminFilter())
# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø–∞–º–∏
# router.message.filter(F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async def _get_target_user(message: types.Message, command: CommandObject, bot: Bot) -> Optional[types.User]:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ —Ä–µ–ø–ª–∞—è –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç User –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏–ª–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å—é.
    """
    target_user: Optional[types.User] = None
    error_message: Optional[str] = None

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message and message.reply_to_message.from_user:
        target_user = message.reply_to_message.from_user
        logger.debug(f"Target user identified via reply: {target_user.id} ({target_user.full_name})")
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    elif command and command.args:
        arg = command.args.strip()
        logger.debug(f"Attempting to find target user by argument: '{arg}'")
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ ID
        if arg.isdigit() or (arg.startswith('-') and arg[1:].isdigit()):
             try:
                 target_user_id = int(arg)
                 target_user = await bot.get_chat(target_user_id) # get_chat –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å Chat –∏–ª–∏ User
                 if not isinstance(target_user, types.User): # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                     error_message = f"‚ùå ID {target_user_id} –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
                     target_user = None
                 else: logger.info(f"Found user {target_user_id} by ID argument.")
             except TelegramAPIError as e:
                 logger.warning(f"Could not get user by ID {arg}: {e}")
                 error_message = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID `{arg}` –≤ Telegram."
             except Exception as e: # –õ–æ–≤–∏–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ get_chat
                 logger.error(f"Unexpected error getting user by ID {arg}: {e}", exc_info=True)
                 error_message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID."
        # –ï—Å–ª–∏ –Ω–µ ID, –∏—â–µ–º –ø–æ –∏–º–µ–Ω–∏/—é–∑–µ—Ä–Ω–µ–π–º—É –≤ –ë–î
        elif database: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—è –ë–î
             db_user_id = await database.find_user_id_by_profile(arg)
             if db_user_id:
                  try:
                      target_user = await bot.get_chat(db_user_id)
                      if not isinstance(target_user, types.User): target_user = None
                      else: logger.info(f"Found user {db_user_id} by profile search for '{arg}'.")
                  except Exception as e:
                       logger.warning(f"Found user ID {db_user_id} in DB for '{arg}', but failed to get chat info: {e}")
                       error_message = f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω ID `{db_user_id}`, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ –∏–∑ Telegram."
             else:
                  error_message = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{escape_markdown_v2(arg)}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ ID, –Ω–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        else: # –ï—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            error_message = "‚ùå –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏/—é–∑–µ—Ä–Ω–µ–π–º—É –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ –ë–î)."
    else:
         error_message = "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ ID/–∏–º–µ–Ω–µ–º/—é–∑–µ—Ä–Ω–µ–π–º–æ–º –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã)."

    # –ï—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞
    if error_message:
        await message.reply(error_message) # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç MarkdownV2
        return None

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    if target_user is None:
         await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
         return None
    if target_user.is_bot:
         await message.reply("üö´ –ö–æ–º–∞–Ω–¥—ã –Ω–µ–ª—å–∑—è –ø—Ä–∏–º–µ–Ω—è—Ç—å –∫ –±–æ—Ç–∞–º.")
         return None
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∫ –¥—Ä—É–≥–æ–º—É –∞–¥–º–∏–Ω—É –±–æ—Ç–∞
    if target_user.id != message.from_user.id and check_if_admin(target_user.id):
         await message.reply("üö´ –ù–µ–ª—å–∑—è –ø—Ä–∏–º–µ–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –∫ –¥—Ä—É–≥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.")
         return None
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ —á–∞—Ç–∞ (–¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤)
    if message.chat.type != ChatType.PRIVATE:
         try:
            member = await bot.get_chat_member(message.chat.id, target_user.id)
            if member.status in ["administrator", "creator"]:
                 await message.reply("üö´ –ù–µ–ª—å–∑—è –ø—Ä–∏–º–µ–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–∞—Ç–∞.")
                 return None
         except TelegramAPIError as e:
              logger.error(f"Failed check chat admin status user={target_user.id} chat={message.chat.id}: {e}")
              await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ.")
              return None
         except Exception as e: # –õ–æ–≤–∏–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ get_chat_member
              logger.error(f"Unexpected error checking chat member status user={target_user.id} chat={message.chat.id}: {e}", exc_info=True)
              await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
              return None

    return target_user # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


# --- –ö–æ–º–∞–Ω–¥—ã –í–∞—Ä–Ω–æ–≤ ---
@router.message(Command("warn"))
async def warn_user_command(message: types.Message, command: CommandObject, bot: Bot):
    """–í—ã–¥–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    if database is None: await message.reply("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."); return

    target_user = await _get_target_user(message, command, bot)
    if not target_user: return

    chat_id = message.chat.id
    user_id = target_user.id

    new_warn_count = await database.add_user_warning(chat_id, user_id)

    if new_warn_count is None:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ –ë–î.")
        return

    warn_limit = getattr(settings, 'warn_limit', 5) # –ë–µ—Ä–µ–º –ª–∏–º–∏—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ —Å—Ç–∞–≤–∏–º 5
    mention = target_user.mention_markdown(target_user.full_name)
    reply_text = f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {mention} –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\\! ({new_warn_count}/{warn_limit})"

    if new_warn_count >= warn_limit:
        reply_text += f"\nüö® –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\\! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω\\."
        try:
            # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
            await bot.ban_chat_member(chat_id=chat_id, user_id=user_id)
            logger.info(f"User {user_id} banned in chat {chat_id} due to warn limit.")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∞—Ä–Ω—ã –ø–æ—Å–ª–µ –±–∞–Ω–∞
            await database.reset_user_warnings(chat_id, user_id)
        except TelegramAPIError as e:
            logger.error(f"Failed ban user {user_id} after warn limit chat={chat_id}: {e}")
            reply_text += "\n(–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\\.)"
        except Exception as e:
             logger.error(f"Unexpected error banning user {user_id} after warn limit chat={chat_id}: {e}", exc_info=True)
             reply_text += "\n(–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –±–∞–Ω–∞\\.)"

    await message.reply(reply_text) # –¢–µ–∫—Å—Ç —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç Markdown V2

@router.message(Command("unwarn"))
async def unwarn_user_command(message: types.Message, command: CommandObject, bot: Bot):
    """–°–Ω–∏–º–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ(—è) —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if database is None: await message.reply("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."); return

    target_user = await _get_target_user(message, command, bot)
    if not target_user: return

    chat_id = message.chat.id
    user_id = target_user.id
    count_to_remove = 1
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    if command and command.args and command.args.isdigit():
        count_to_remove = max(1, min(int(command.args), 5)) # –°–Ω–∏–º–∞–µ–º –æ—Ç 1 –¥–æ 5 –≤–∞—Ä–Ω–æ–≤
        logger.debug(f"Attempting to remove {count_to_remove} warnings from user {user_id}.")

    current_warns = await database.get_user_warn_count(chat_id, user_id)
    if current_warns == 0:
         mention = target_user.mention_markdown(target_user.full_name)
         await message.reply(f"‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {mention} –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\\.")
         return

    new_warn_count = await database.remove_user_warning(chat_id, user_id, count_to_remove)

    if new_warn_count is None:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏–∑ –ë–î.")
        return

    removed_actual = current_warns - new_warn_count
    mention = target_user.mention_markdown(target_user.full_name)
    await message.reply(f"‚úÖ –°–Ω—è—Ç–æ {removed_actual} –ø—Ä–µ–¥\\-–∏–π —Å {mention}\\. –û—Å—Ç–∞–ª–æ—Å—å: {new_warn_count}\\.")


@router.message(Command("warns"))
async def show_warns_command(message: types.Message, command: CommandObject, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤—Å–µ–≥–æ —á–∞—Ç–∞."""
    if database is None: await message.reply("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."); return

    chat_id = message.chat.id
    target_user: Optional[types.User] = None

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Ä–µ–ø–ª–∞–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.reply_to_message or (command and command.args):
        target_user = await _get_target_user(message, command, bot)
        if not target_user: return # –û—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ–ª—å–∑—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å
        user_id = target_user.id
        warn_count = await database.get_user_warn_count(chat_id, user_id)
        warn_limit = getattr(settings, 'warn_limit', 5)
        mention = target_user.mention_markdown(target_user.full_name)
        await message.reply(
            f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {mention} {warn_count}/{warn_limit} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ\\."
        )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–∞—Ä–Ω—ã –≤ —á–∞—Ç–µ
        all_chat_warnings = await database.get_chat_warnings(chat_id)
        if not all_chat_warnings:
            await message.reply("‚úÖ –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏\\.")
            return

        warn_list_text = ["üö® *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏:*"]
        user_mentions: Dict[int, str] = {}
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        user_ids = list(all_chat_warnings.keys())
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–∞ –ø–∞—á–∫–æ–π (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ) –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É
        for user_id in user_ids:
             try:
                 member = await bot.get_chat_member(chat_id, user_id)
                 user_mentions[user_id] = member.user.mention_markdown(member.user.full_name)
             except Exception:
                 user_mentions[user_id] = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\\_ID:`{user_id}`" # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º ID

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
        for user_id, count in all_chat_warnings.items():
            mention = user_mentions.get(user_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\\_ID:`{user_id}`")
            warn_list_text.append(f"  ‚Ä¢ {mention}: {count} –ø—Ä–µ–¥\\.")

        await message.reply("\n".join(warn_list_text))

# --- –ö–æ–º–∞–Ω–¥—ã –ë–∞–Ω–∞ ---
@router.message(Command("ban"))
async def ban_user_command(message: types.Message, command: CommandObject, bot: Bot):
    """–ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ."""
    if database is None: await message.reply("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."); return

    target_user = await _get_target_user(message, command, bot)
    if not target_user: return

    chat_id = message.chat.id
    user_id = target_user.id
    mention = target_user.mention_markdown(target_user.full_name)

    try:
        # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.ban_chat_member(chat_id=chat_id, user_id=user_id)
        logger.info(f"Admin {message.from_user.id} banned user {user_id} in chat {chat_id}")
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∞—Ä–Ω—ã –ø–æ—Å–ª–µ –±–∞–Ω–∞
        await database.reset_user_warnings(chat_id, user_id)
        await message.reply(f"üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –∑–∞–±–∞–Ω–µ–Ω\\. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã\\.")
    except TelegramAPIError as e:
        logger.error(f"Failed to ban user {user_id} in chat {chat_id}: {e}")
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {escape_markdown_v2(str(e))}")
    except Exception as e:
         logger.error(f"Unexpected error banning user {user_id} chat={chat_id}: {e}", exc_info=True)
         await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ\\.")


@router.message(Command("unban"))
async def unban_user_command(message: types.Message, command: CommandObject, bot: Bot):
    """–†–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ."""
    if database is None: await message.reply("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."); return

    # Unban —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ ID –∏–ª–∏ username, reply —Ç—É—Ç –Ω–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ ID –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ
    if not command or not command.args:
        await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\\.")
        return

    target_query = command.args.strip()
    target_user_id: Optional[int] = None
    target_mention: str = escape_markdown_v2(target_query) # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–ø–æ–º–∏–Ω–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID
    if target_query.isdigit() or (target_query.startswith('-') and target_query[1:].isdigit()):
        target_user_id = int(target_query)
        target_mention = f"ID `{target_user_id}`"
    else:
        # –ò—â–µ–º –≤ –ë–î, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª
        target_user_id = await database.find_user_id_by_profile(target_query)
        if not target_user_id:
             await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è '{escape_markdown_v2(target_query)}'\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–æ—á–Ω—ã–π ID\\.")
             return
        else:
             target_mention = f"'{escape_markdown_v2(target_query)}' \\(ID `{target_user_id}`\\)"

    chat_id = message.chat.id
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–±–∞–Ω–∏—Ç—å
        await bot.unban_chat_member(chat_id=chat_id, user_id=target_user_id, only_if_banned=True)
        logger.info(f"Admin {message.from_user.id} unbanned user {target_user_id} in chat {chat_id}")
        await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_mention} —Ä–∞–∑–±–∞–Ω–µ–Ω \\(–µ—Å–ª–∏ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω\\)\\.")
    except TelegramAPIError as e:
        logger.error(f"Failed to unban user {target_user_id} in chat {chat_id}: {e}")
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {escape_markdown_v2(str(e))}")
    except Exception as e:
         logger.error(f"Unexpected error unbanning user {target_user_id} chat={chat_id}: {e}", exc_info=True)
         await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ\\.")


# --- –ö–æ–º–∞–Ω–¥—ã –ù–∞—Å—Ç—Ä–æ–µ–∫ AI ---
@router.message(Command("set_prompt"))
async def set_prompt_command(message: types.Message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞."""
    if database is None: await message.reply("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."); return

    if not message.reply_to_message or not message.reply_to_message.text:
        await message.reply("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–æ–≤–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞\\!")
        return

    chat_id = message.chat.id
    new_prompt = message.reply_to_message.text.strip()

    if not new_prompt:
         await message.reply("‚ùå –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º\\.")
         return

    if await database.upsert_chat_settings(chat_id, custom_prompt=new_prompt):
        await message.reply("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω\\! –ò—Å—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è\\.")
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –ø—Ä–∏–º–µ–Ω–∏–ª—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–∏–∞–ª–æ–≥—É
        await database.clear_chat_history(chat_id)
    else:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\\.")


@router.message(Command("reset_prompt"))
async def reset_prompt_command(message: types.Message):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —á–∞—Ç–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É."""
    if database is None: await message.reply("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."); return

    chat_id = message.chat.id
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ config.py
    if await database.upsert_chat_settings(chat_id, custom_prompt=""):
        await message.reply("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–±—Ä–æ—à–µ–Ω –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É\\! –ò—Å—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è\\.")
        await database.clear_chat_history(chat_id)
    else:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–º–ø—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\\.")


@router.message(Command("set_ai"))
async def set_ai_mode_command(message: types.Message, command: CommandObject):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º AI (pro/default) –¥–ª—è —á–∞—Ç–∞."""
    if database is None: await message.reply("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."); return

    mode_pro = database.AI_MODE_PRO # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –º–æ–¥—É–ª—è –ë–î
    mode_default = database.AI_MODE_DEFAULT

    if not command or not command.args or command.args.lower() not in [mode_pro, mode_default]:
        await message.reply(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\\! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/set_ai {mode_pro}` –∏–ª–∏ `/set_ai {mode_default}`"
        )
        return

    chat_id = message.chat.id
    new_mode = command.args.lower()

    if await database.upsert_chat_settings(chat_id, ai_mode=new_mode):
        mode_name = "Gemini (Pro)" if new_mode == mode_pro else "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (Default)"
        await message.reply(f"‚úÖ –†–µ–∂–∏–º AI –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {escape_markdown_v2(mode_name)}\\.")
        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–∞
        # await database.clear_chat_history(chat_id)
    else:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º AI –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\\.")


@router.message(Command("set_model"))
async def set_gemini_model_command(message: types.Message, command: CommandObject):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –º–æ–¥–µ–ª—å Gemini –¥–ª—è —á–∞—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º 'pro')."""
    if database is None: await message.reply("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."); return

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–∑ config (–µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–∞–∫ —Å–ø–∏—Å–æ–∫/enum)
    # –ò–ª–∏ —Ö–∞—Ä–¥–∫–æ–¥–∏–º –∑–¥–µ—Å—å –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    available_models = [
        settings.pro_gemini_model_name,
        settings.lite_gemini_model_name
        # –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    ]
    available_models_str = ", ".join([f"`{m}`" for m in available_models])

    if not command or not command.args or command.args not in available_models:
         await message.reply(
             f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –º–æ–¥–µ–ª—å\\! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/set_model [–∏–º—è_–º–æ–¥–µ–ª–∏]`\n"
             f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {available_models_str}"
         )
         return

    chat_id = message.chat.id
    new_model = command.args

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–µ–∂–∏–º 'pro'
    if await database.upsert_chat_settings(chat_id, gemini_model=new_model, ai_mode=database.AI_MODE_PRO):
        await message.reply(f"‚úÖ –ú–æ–¥–µ–ª—å Gemini –¥–ª—è —á–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: `{escape_markdown_v2(new_model)}`\\. –†–µ–∂–∏–º AI: `{database.AI_MODE_PRO}`\\. –ò—Å—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–∞\\.")
        await database.clear_chat_history(chat_id) # –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—â–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏
    else:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å Gemini –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\\.")


# --- –î—Ä—É–≥–∏–µ –ê–¥–º–∏–Ω—Å–∫–∏–µ –ö–æ–º–∞–Ω–¥—ã ---

@router.message(Command("clear"))
async def clear_history_command(message: types.Message):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞."""
    if database is None: await message.reply("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."); return

    chat_id = message.chat.id
    deleted_count = await database.clear_chat_history(chat_id)
    await message.reply(f"üîÑ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞ \\({deleted_count} –∑–∞–ø–∏—Å–µ–π —É–¥–∞–ª–µ–Ω–æ\\)\\.")


@router.message(Command("del"))
async def delete_message_command(message: types.Message, bot: Bot):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏."""
    if not message.reply_to_message:
        await message.reply("‚ÑπÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å\\!")
        return

    try:
        await bot.delete_message(message.chat.id, message.reply_to_message.message_id)
        logger.info(f"Admin {message.from_user.id} deleted message {message.reply_to_message.message_id} in chat {message.chat.id}")
        # –£–¥–∞–ª—è–µ–º –∏ —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É /del
        await message.delete()
    except TelegramAPIError as e:
        logger.error(f"Failed to delete message {message.reply_to_message.message_id} chat={message.chat.id}: {e}")
        # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –≤ —á–∞—Ç, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {escape_markdown_v2(str(e))}")
    except Exception as e:
         logger.error(f"Unexpected error deleting msg {message.reply_to_message.message_id} chat={message.chat.id}: {e}", exc_info=True)


@router.message(Command("stats"))
async def show_stats_command(message: types.Message, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞."""
    if database is None: await message.reply("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."); return

    chat_id = message.chat.id
    top_users_data = await database.get_chat_stats_top_users(chat_id, limit=10)

    if not top_users_data:
        await message.reply("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞\\.")
        return

    stats_text = ["üèÜ *–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞:*"]
    user_mentions: Dict[int, str] = {}
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    user_ids_to_fetch = [uid for uid, count in top_users_data]
    # –ú–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –ø–æ–ª—É—á–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–∞—á–∫–æ–π, –µ—Å–ª–∏ API –ø–æ–∑–≤–æ–ª—è–µ—Ç
    for user_id in user_ids_to_fetch:
         try:
             # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ get_chat_member
             member = await bot.get_chat_member(chat_id, user_id)
             user_mentions[user_id] = member.user.mention_markdown(member.user.full_name)
         except Exception:
             # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—à–µ–ª, –æ—à–∏–±–∫–∞ API), –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
             user_mentions[user_id] = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\\_ID:`{user_id}`"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    for i, (user_id, count) in enumerate(top_users_data, 1):
        mention = user_mentions.get(user_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\\_ID:`{user_id}`")
        stats_text.append(f"{i}\\. {mention} \\- {count} —Å–æ–æ–±—â\\.")

    await message.reply("\n".join(stats_text))


@router.message(Command('charts'))
async def charts_command_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /charts (–≤—ã–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç)."""
    args = message.text.split()
    limit = 10
    if len(args) > 1 and args[1].isdigit():
        limit = max(1, min(int(args[1]), 50)) # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç

    try:
        result = await get_music_charts(source="yandex", limit=limit) # –í—ã–∑—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç

        if isinstance(result, dict) and result.get("status") == "success":
            chart_source = result.get("chart_source", "–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π —á–∞—Ä—Ç")
            top_tracks = result.get("top_tracks", [])
            if top_tracks:
                 response_lines = [f"üé∂ *–¢–æ–ø-{len(top_tracks)} –∏–∑ {escape_markdown_v2(chart_source)}:*\n"]
                 for track in top_tracks:
                      title = escape_markdown_v2(track.get('title', 'N/A'))
                      artist = escape_markdown_v2(track.get('artist', 'N/A'))
                      pos = track.get('position', '')
                      url = track.get('url')
                      line = f"{pos}\\. {title} \\- {artist}"
                      if url and url != "N/A":
                          line = f"{pos}\\. [{title} \\- {artist}]({url})" # –î–µ–ª–∞–µ–º —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å URL
                      response_lines.append(line)
                 await message.reply("\n".join(response_lines), disable_web_page_preview=True)
            else:
                 await message.reply(f"‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫–∏ –∏–∑ —á–∞—Ä—Ç–∞ {escape_markdown_v2(chart_source)}\\.")

        else: # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ success –∏–ª–∏ result –Ω–µ —Å–ª–æ–≤–∞—Ä—å
            error_text = result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞") if isinstance(result, dict) else str(result)
            await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ä—Ç: {escape_markdown_v2(error_text)}")
    except Exception as e:
         logger.error(f"Error handling /charts command: {e}", exc_info=True)
         await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ä—Ç–∞\\.")